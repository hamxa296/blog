/**
 * GIKI Chronicles - Production Build
 * Combined and optimized for production
 * Includes: Firebase, Security, Performance Monitoring
 * Build Date: 2025-08-17T20:59:53.011Z
 */


// firebase-init.js
/**
 * firebase-init.js
 * This file initializes the Firebase application. It should be the first
 * Firebase-related script loaded on any page.
 */

// Firebase project configuration
const firebaseConfig = {
    apiKey: "AIzaSyC1Q9tIEHLqAKZj6IjJN8aPiQCAPYbsi7I",
    authDomain: "giki-chronicles.firebaseapp.com",
    projectId: "giki-chronicles",
    storageBucket: "giki-chronicles.firebasestorage.app",
    messagingSenderId: "80968785263",
    appId: "1:80968785263:web:666d2e69fef2ef6f5a5c9a"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Make auth and firestore services available globally
const auth = firebase.auth();
const db = firebase.firestore();

// Flag to prevent duplicate user creation during the same session
let userDocumentCreated = false;
let authStateInitialized = false;

// Set authentication persistence to LOCAL (persists across browser sessions)
// This ensures the user stays logged in when switching tabs or refreshing pages
auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL)
    .catch((error) => {
        console.error("Error setting auth persistence:", error);
    });

// Function to handle user data synchronization
const syncUserData = async (user) => {
    if (!user || !user.uid || !user.email) {
        return false;
    }

    try {
        // Store comprehensive user info in localStorage for cross-page access
        const userInfo = {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName || user.email?.split('@')[0] || 'User',
            photoURL: user.photoURL || '',
            lastSignIn: new Date().toISOString()
        };
        
        localStorage.setItem('currentUser', JSON.stringify(userInfo));
        
        // Ensure user document exists in Firestore with correct data
        const userDoc = await db.collection('users').doc(user.uid).get();
        if (!userDoc.exists && !userDocumentCreated) {
            const userData = {
                uid: user.uid,
                email: user.email,
                displayName: user.displayName || user.email?.split('@')[0] || 'User',
                photoURL: user.photoURL || '',
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                lastUpdated: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            // Only add isAdmin field for admin accounts
            if (typeof isAdminUID === 'function' && isAdminUID(user.uid)) {
                userData.isAdmin = true;
            }
            
            await db.collection('users').doc(user.uid).set(userData);
            userDocumentCreated = true; // Prevent duplicate creation
        } else if (userDoc.exists) {
            // Update existing document with current user data (but preserve admin status)
            await db.collection('users').doc(user.uid).update({
                email: user.email,
                displayName: user.displayName || user.email?.split('@')[0] || 'User',
                photoURL: user.photoURL || '',
                lastUpdated: firebase.firestore.FieldValue.serverTimestamp()
            });
        }
        
        return true;
    } catch (error) {
        console.error("Error syncing user data:", error);
        return false;
    }
};

// Enhanced authentication state listener with better user data handling
// Wait for Firebase Auth to be fully initialized before setting up the listener
auth.onAuthStateChanged(async (user) => {
    if (user) {
        // Validate that we have proper user data before proceeding
        if (!user.uid || !user.email) {
            return;
        }
        
        // Sync user data
        await syncUserData(user);
        
    } else {
        // Clear user info from localStorage
        localStorage.removeItem('currentUser');
        // Reset the flag for next session
        userDocumentCreated = false;
    }
    
    // Mark auth state as initialized
    authStateInitialized = true;
    
    // Dispatch custom event to notify other scripts
    window.dispatchEvent(new CustomEvent('authStateChanged', { 
        detail: { user: user, initialized: true } 
    }));
});

// Function to check if user data is properly loaded
const ensureUserDataLoaded = async () => {
    const currentUser = auth.currentUser;
    if (!currentUser) {
        return false;
    }
    
    // Check if we have user data in localStorage
    const storedUser = localStorage.getItem('currentUser');
    if (!storedUser) {
        return await syncUserData(currentUser);
    }
    
    try {
        const parsedUser = JSON.parse(storedUser);
        if (parsedUser.uid !== currentUser.uid) {
            return await syncUserData(currentUser);
        }
        
        return true;
    } catch (error) {
        console.error("Error parsing stored user data:", error);
        return await syncUserData(currentUser);
    }
};

// Make the function globally available
window.ensureUserDataLoaded = ensureUserDataLoaded;


// admin-config.js
/**
 * admin-config.js
 * Centralized admin configuration for the application
 */

// Array of admin UIDs - add new admin UIDs here
const ADMIN_UIDS = [
    "DNDjKZRt0yQNh4d3inNchRcs0oY2", // Your working admin account
    "zCINcUAy84aMwHF83wlRUTO2Dn32",
    "gn2AlkdswANjVg58rUXOLoPaX192"
];

/**
 * Checks if a user UID is in the admin list
 * @param {string} uid - The user UID to check
 * @returns {boolean} - True if the user is an admin
 */
function isAdminUID(uid) {
    return ADMIN_UIDS.includes(uid);
}

/**
 * Gets all admin UIDs
 * @returns {string[]} - Array of admin UIDs
 */
function getAdminUIDs() {
    return [...ADMIN_UIDS]; // Return a copy to prevent modification
}

// Make functions globally available
window.isAdminUID = isAdminUID;
window.getAdminUIDs = getAdminUIDs;
window.ADMIN_UIDS = ADMIN_UIDS; 

// auth.js
/**
 * auth.js
 * This file contains the core Firebase authentication functions.
 * It now also handles creating user profile documents in Firestore upon sign-up.
 */

/*
    FIRESTORE DATABASE STRUCTURE for the 'users' collection:

    Each document will be identified by the user's UID from Authentication.
    - uid (string): The user's unique ID.
    - email (string): The user's email address.
    - displayName (string): The user's public name (can be edited).
    - photoURL (string): The URL for the user's profile picture.
    - bio (string, optional): A short user biography.
    - isAdmin (boolean, optional): Set to true for administrators.
*/

/**
 * Signs up a new user and creates their profile in Firestore.
 */
async function signUpUser(email, password) {
    try {
        const userCredential = await auth.createUserWithEmailAndPassword(email, password);
        const user = userCredential.user;

        // Create a user document in the 'users' collection
        const userData = {
            uid: user.uid,
            email: user.email,
            displayName: email.split('@')[0], // Default display name is the part of the email before the @
            photoURL: '', // Default empty profile picture
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
        };
        
        // Only add isAdmin field for admin accounts
        if (typeof isAdminUID === 'function' && isAdminUID(user.uid)) {
            userData.isAdmin = true;
        }
        
        await db.collection('users').doc(user.uid).set(userData);

        return { success: true, user: user };
    } catch (error) {
        console.error("Sign-up Error:", error);
        return { success: false, error: error.message };
    }
}

/**
 * Signs in a user with Google and creates/updates their profile in Firestore.
 */
async function signInWithGoogle() {
    try {
        const provider = new firebase.auth.GoogleAuthProvider();
        const result = await auth.signInWithPopup(provider);
        const user = result.user;

        // Check if user is blocked
        try {
            const userDoc = await db.collection('users').doc(user.uid).get();
            if (userDoc.exists) {
                const userData = userDoc.data();
                if (userData.isBlocked) {
                    // Sign out the user immediately if they're blocked
                    await auth.signOut();
                    return { 
                        success: false, 
                        error: "Your account has been blocked. Please contact an administrator for assistance." 
                    };
                }
            }
        } catch (firestoreError) {
            console.error("Error checking user status:", firestoreError);
            // Continue with login even if Firestore fails
        }

        // Create or update the user document in the 'users' collection
        const userData = {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName,
            photoURL: user.photoURL
        };
        
        // Only add isAdmin field for admin accounts
        if (typeof isAdminUID === 'function' && isAdminUID(user.uid)) {
            userData.isAdmin = true;
        }
        
        // { merge: true } prevents overwriting existing fields if the user already has a profile
        await db.collection('users').doc(user.uid).set(userData, { merge: true });

        return { success: true, user: user };
    } catch (error) {
        console.error("Google Sign-in Error:", error);
        return { success: false, error: error.message };
    }
}

/**
 * Logs in an existing user with their email and password.
 */
async function loginUser(email, password) {
    try {
        const userCredential = await auth.signInWithEmailAndPassword(email, password);
        const user = userCredential.user;
        
        // Check if user is blocked
        try {
            const userDoc = await db.collection('users').doc(user.uid).get();
            if (userDoc.exists) {
                const userData = userDoc.data();
                if (userData.isBlocked) {
                    // Sign out the user immediately if they're blocked
                    await auth.signOut();
                    return { 
                        success: false, 
                        error: "Your account has been blocked. Please contact an administrator for assistance." 
                    };
                }
            }
        } catch (firestoreError) {
            console.error("Error checking user status:", firestoreError);
            // Continue with login even if Firestore fails
        }
        
        // Ensure user document exists in Firestore
        try {
            const userDoc = await db.collection('users').doc(user.uid).get();
            if (!userDoc.exists) {
                const userData = {
                    uid: user.uid,
                    email: user.email || email,
                    displayName: user.displayName || email.split('@')[0],
                    photoURL: user.photoURL || '',
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                };
                
                // Only add isAdmin field for admin accounts
                if (typeof isAdminUID === 'function' && isAdminUID(user.uid)) {
                    userData.isAdmin = true;
                }
                
                await db.collection('users').doc(user.uid).set(userData);
            }
        } catch (firestoreError) {
            console.error("Error ensuring user document exists:", firestoreError);
            // Continue with login even if Firestore fails
        }
        
        return { success: true, user: user };
    } catch (error) {
        console.error("Login Error:", error);
        return { success: false, error: error.message };
    }
}

/**
 * Logs out the currently signed-in user.
 */
async function logoutUser() {
    try {
        await auth.signOut();
        return { success: true };
    } catch (error) {
        console.error("Logout Error:", error);
        return { success: false, error: error.message };
    }
}

/**
 * Checks the current authentication state of the user.
 */
function onAuthStateChange(callback) {
    return auth.onAuthStateChanged(callback);
}

/**
 * Checks if the current user is an admin.
 * @returns {Promise<boolean>}
 */
async function isUserAdmin() {
    const user = auth.currentUser;
    if (!user) return false;
    
    try {
        // First, ensure user data is loaded
        if (typeof window.ensureUserDataLoaded === 'function') {
            await window.ensureUserDataLoaded();
        }
        const userDoc = await db.collection('users').doc(user.uid).get();
        if (!userDoc.exists) {
            return false;
        }
        
        const userData = userDoc.data();
        // Check if user should be admin but isn't marked as such
        if (typeof isAdminUID === 'function' && isAdminUID(user.uid) && userData.isAdmin !== true) {
            try {
                await db.collection('users').doc(user.uid).update({
                    isAdmin: true
                });
                return true;
            } catch (updateError) {
                console.error("Error updating user to admin status:", updateError);
            }
        }
        
        const isAdmin = userData.isAdmin === true; // Explicitly check for true
        return isAdmin;
    } catch (error) {
        console.error("Error checking admin status:", error);
        return false;
    }
}


// users.js
/**
 * users.js
 * This file contains functions for interacting with the 'users' collection
 * in Firestore and managing user profile data, including photo uploads.
 */

/**
 * Fetches a user's profile document from Firestore.
 * @param {string} userId - The UID of the user to fetch.
 * @returns {Promise<object>} A promise that resolves with the user's profile data.
 */
async function getUserProfile(userId) {
    try {
        const docRef = db.collection("users").doc(userId);
        const docSnap = await docRef.get();
        if (docSnap.exists) {
            return { success: true, profile: docSnap.data() };
        } else {
            return { success: false, error: "User profile not found." };
        }
    } catch (error) {
        console.error("Error getting user profile:", error);
        return { success: false, error: "Failed to fetch user profile." };
    }
}

/**
 * Updates a user's profile data in Firestore.
 * @param {string} userId - The UID of the user to update.
 * @param {object} profileData - An object with the fields to update (e.g., { displayName, bio }).
 * @returns {Promise<object>} A promise that resolves on success.
 */
async function updateUserProfile(userId, profileData) {
    try {
        const docRef = db.collection("users").doc(userId);
        await docRef.update(profileData);
        return { success: true };
    } catch (error) {
        console.error("Error updating profile:", error);
        return { success: false, error: "Failed to update profile." };
    }
}

/**
 * Uploads a profile picture to Firebase Storage and returns the download URL.
 * @param {string} userId - The UID of the user.
 * @param {File} file - The image file to upload.
 * @returns {Promise<object>} A promise that resolves with the public URL of the uploaded image.
 */
async function uploadProfilePicture(userId, file) {
    try {
        // Create a storage reference
        const storageRef = firebase.storage().ref();
        // Create a reference to 'profile_pictures/{userId}/{fileName}'
        const fileRef = storageRef.child(`profile_pictures/${userId}/${file.name}`);

        // Upload the file
        const snapshot = await fileRef.put(file);

        // Get the download URL
        const downloadURL = await snapshot.ref.getDownloadURL();

        return { success: true, url: downloadURL };
    } catch (error) {
        console.error("Error uploading photo:", error);
        return { success: false, error: "Failed to upload photo." };
    }
}

/**
 * Checks if the current user is an admin.
 * This is an alias for the isUserAdmin function from auth.js
 * @returns {Promise<boolean>}
 */
async function checkUserAdminStatus() {
    const result = await isUserAdmin();
    return result;
}

// Make checkUserAdminStatus globally accessible
window.checkUserAdminStatus = checkUserAdminStatus;

/**
 * Simple admin check for testing
 * @returns {Promise<boolean>}
 */
async function testAdminStatus() {
    const user = auth.currentUser;
    if (!user) {
        return false;
    }
    
    try {
        const userDoc = await db.collection('users').doc(user.uid).get();
        if (userDoc.exists) {
            const userData = userDoc.data();
            return userData.isAdmin === true;
        }
        return false;
    } catch (error) {
        console.error("Test admin check error:", error);
        return false;
    }
}

// posts.js
/**
 * posts.js
 * This file contains the core functions for interacting with the 'posts'
 * collection in the Firestore database.
 */

/*
    FIRESTORE DATABASE STRUCTURE for the 'posts' collection:
    - title (string)
    - content (string)
    - description (string)
    - photoUrl (string)
    - authorId (string)
    - authorName (string)
    - createdAt (timestamp)
    - status (string): "pending", "approved", "rejected"
    - genre (string)
    - tags (array)
    - isFeatured (boolean, optional): Set to true for the featured post.
*/

async function createPost(postData) {
    const user = auth.currentUser;
    if (!user) {
        console.error("No user is logged in.");
        return { success: false, error: "You must be logged in to create a post." };
    }
    try {
        // Convert the comma-separated tags string into an array of strings.
        const tagsArray = postData.tags ? postData.tags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
        const newPost = {
            title: postData.title,
            content: postData.content,
            description: postData.description || "",
            photoUrl: postData.photoUrl || "",
            genre: postData.genre || "General",
            tags: tagsArray,
            authorId: user.uid,
            authorName: user.displayName || user.email,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            status: "pending",
            isFeatured: false // Default to not featured
        };
        const docRef = await db.collection("posts").add(newPost);
        // Note: Stats will be updated when the post is approved by admin
        // We don't update stats for pending posts to keep counts accurate
        
        return { success: true, postId: docRef.id };

    } catch (error) {
        console.error("Error creating post:", error);
        console.error("Error details:", error.message, error.code);
        return { success: false, error: "Failed to create post: " + error.message };
    }
}

/**
 * Fetches all blog posts from Firestore that have been approved.
 */
async function getApprovedPosts() {
    try {
        const snapshot = await db.collection("posts")
            .where("status", "==", "approved")
            .orderBy("createdAt", "desc") // Show the newest posts first
            .get();

        if (snapshot.empty) {
            return { success: true, posts: [] };
        }

        const posts = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));

        return { success: true, posts: posts };

    } catch (error) {
        console.error("Error fetching approved posts:", error);
        return { success: false, error: "Failed to fetch posts." };
    }
}

/**
 * Fetches a single blog post from Firestore using its document ID.
 */
async function getPostById(postId) {
    try {
        const docRef = db.collection("posts").doc(postId);
        const docSnap = await docRef.get();

        if (docSnap.exists) {
            return { success: true, post: { id: docSnap.id, ...docSnap.data() } };
        } else {
            console.error("No such document!");
            return { success: false, error: "Post not found." };
        }
    } catch (error) {
        console.error("Error fetching post by ID:", error);
        return { success: false, error: "Failed to fetch post." };
    }
}

/**
 * Fetches the single post marked as featured.
 * @returns {Promise<object>} A promise that resolves with the featured post object.
 */
async function getFeaturedPost() {
    try {
        const snapshot = await db.collection("posts")
            .where("isFeatured", "==", true)
            .where("status", "==", "approved")
            .limit(1)
            .get();

        if (snapshot.empty) {
            return { success: false, error: "No featured post found." };
        }

        const post = { id: snapshot.docs[0].id, ...snapshot.docs[0].data() };
        return { success: true, post: post };

    } catch (error) {
        console.error("Error fetching featured post:", error);
        return { success: false, error: "Failed to fetch post." };
    }
}

/**
 * Fetches all posts written by a specific author.
 * @param {string} authorId - The UID of the author.
 * @returns {Promise<object>} A promise that resolves with an array of the author's posts.
 */
async function getPostsByAuthor(authorId) {
    try {
        const snapshot = await db.collection("posts")
            .where("authorId", "==", authorId)
            .orderBy("createdAt", "desc")
            .get();

        const posts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        return { success: true, posts: posts };

    } catch (error) {
        console.error("Error fetching posts by author:", error);
        return { success: false, error: "Failed to fetch posts." };
    }
}
/**
 * Fetches a post for editing, ensuring the current user is the author.
 * @param {string} postId - The ID of the post to fetch.
 * @returns {Promise<object>}
 */
async function getPostForEditing(postId) {
    const user = auth.currentUser;

    if (!user) return { success: false, error: "Authentication required." };

    try {
        const docRef = db.collection("posts").doc(postId);
        const docSnap = await docRef.get();

        if (!docSnap.exists) return { success: false, error: "Post not found." };

        const post = docSnap.data();

        // Security check: ensure the person editing is the original author.
        if (post.authorId !== user.uid) {
            return { success: false, error: "You are not authorized to edit this post." };
        }
        return { success: true, post: { id: docSnap.id, ...post } };
    } catch (error) {
        console.error("Error fetching post for editing:", error);
        return { success: false, error: "Failed to fetch post." };
    }
}

/**
 * Updates an existing post in Firestore.
 * @param {string} postId - The ID of the post to update.
 * @param {object} postData - An object containing the updated data.
 * @returns {Promise<object>}
 */
async function updatePost(postId, postData) {
    const user = auth.currentUser;
    if (!user) return { success: false, error: "Authentication required." };

    try {
        const tagsArray = postData.tags ? postData.tags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];

        const updatedPost = {
            title: postData.title,
            content: postData.content,
            description: postData.description || "",
            photoUrl: postData.photoUrl || "",
            genre: postData.genre || "General",
            tags: tagsArray,
            status: "pending" // Reset status to pending for re-approval
        };

        const docRef = db.collection("posts").doc(postId);
        await docRef.update(updatedPost);

        return { success: true };
    } catch (error) {
        console.error("Error updating post:", error);
        return { success: false, error: "Failed to update post." };
    }
}
async function savePostAsDraft(postData, postId = null) {
    const user = auth.currentUser;
    if (!user) return { success: false, error: "Authentication required." };

    try {
        const tagsArray = postData.tags ? postData.tags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
        const draftData = {
            title: postData.title,
            content: postData.content,
            description: postData.description || "",
            photoUrl: postData.photoUrl || "",
            genre: postData.genre || "General",
            tags: tagsArray,
            authorId: user.uid,
            authorName: user.displayName || user.email,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            status: "draft" // Set status to draft
        };

        if (postId) {
            // Update the existing draft
            const docRef = db.collection("posts").doc(postId);
            await docRef.update(draftData);
            return { success: true, postId: postId };
        } else {
            // Create a new draft
            const docRef = await db.collection("posts").add(draftData);
            return { success: true, postId: docRef.id };
        }
    } catch (error) {
        console.error("Error saving draft:", error);
        return { success: false, error: "Failed to save draft." };
    }
}
/**
 * Fetches all posts that are awaiting admin review.
 * @returns {Promise<object>} A promise that resolves with an array of pending post objects.
 */
async function getPendingPosts() {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }
    // Verify admin status server-side
    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to fetch pending posts");
            return { success: false, error: "Admin privileges required." };
        }
        const snapshot = await db.collection("posts")
            .where("status", "==", "pending")
            .orderBy("createdAt", "asc") // Show oldest submissions first
            .get();

        const posts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        return { success: true, posts: posts };

    } catch (error) {
        console.error("Error fetching pending posts:", error);
        return { success: false, error: "Failed to fetch pending posts." };
    }
}

/**
 * Updates the status of a post (e.g., to "approved" or "rejected").
 * @param {string} postId - The ID of the post to update.
 * @param {string} newStatus - The new status ("approved" or "rejected").
 * @returns {Promise<object>} A promise that resolves on success.
 */
async function updatePostStatus(postId, newStatus) {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    // Verify admin status server-side
    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to update post status");
            return { success: false, error: "Admin privileges required." };
        }

        const docRef = db.collection("posts").doc(postId);
        await docRef.update({ 
            status: newStatus,
            reviewedBy: user.uid,
            reviewedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        return { success: true };
    } catch (error) {
        console.error("Error updating post status:", error);
        return { success: false, error: "Failed to update status." };
    }
}

/**
 * Toggles the featured status of a post (admin only).
 * @param {string} postId - The ID of the post to toggle.
 * @param {boolean} isFeatured - Whether the post should be featured.
 * @returns {Promise<object>} A promise that resolves on success.
 */
async function toggleFeaturedStatus(postId, isFeatured) {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    // Verify admin status server-side
    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to toggle featured status");
            return { success: false, error: "Admin privileges required." };
        }

        const docRef = db.collection("posts").doc(postId);
        await docRef.update({ 
            isFeatured: isFeatured,
            featuredBy: user.uid,
            featuredAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        return { success: true };
    } catch (error) {
        console.error("Error toggling featured status:", error);
        return { success: false, error: "Failed to toggle featured status." };
    }
}

/**
 * Fetches all blog posts from Firestore (admin only).
 * @param {string} status - Optional filter by status ("pending", "approved", "rejected", or "all")
 * @returns {Promise<object>} A promise that resolves with all posts.
 */
async function getAllPosts(status = "all") {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    // Verify admin status server-side
    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to fetch all posts");
            return { success: false, error: "Admin privileges required." };
        }

        let query = db.collection("posts").orderBy("createdAt", "desc");
        
        // Apply status filter if specified
        if (status && status !== "all") {
            query = query.where("status", "==", status);
        }

        const snapshot = await query.get();

        if (snapshot.empty) {
            return { success: true, posts: [] };
        }

        const posts = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));

        return { success: true, posts: posts };

    } catch (error) {
        console.error("Error fetching all posts:", error);
        return { success: false, error: "Failed to fetch posts." };
    }
}

/**
 * Permanently deletes a post from Firestore (admin only).
 * @param {string} postId - The ID of the post to delete.
 * @returns {Promise<object>} A promise that resolves on success.
 */
async function deletePostPermanently(postId) {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    // Verify admin status server-side
    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to delete post");
            return { success: false, error: "Admin privileges required." };
        }

        // Delete the post document
        await db.collection("posts").doc(postId).delete();
        return { success: true };

    } catch (error) {
        console.error("Error deleting post:", error);
        return { success: false, error: "Failed to delete post." };
    }
}

// gallery.js
/**
 * gallery.js
 * Handles all Firestore interactions for the photo gallery.
 */

/*
    FIRESTORE DATABASE STRUCTURE:

    'galleryPhotos' collection:
    - imageUrl (string): The URL of the image from Cloudinary.
    - fullSizeUrl (string): The full-size URL for fullscreen viewing.
    - caption (string): The user-submitted caption.
    - category (string): e.g., "Academic Blocks", "Hostels".
    - uploaderName (string): Name of the user who submitted.
    - uploaderId (string): UID of the user who submitted.
    - cloudinaryId (string): Cloudinary public ID for deletion.
    - isHighlighted (boolean): Whether this photo should be featured in the slideshow.
    - status (string): "approved", "pending", or "rejected"
    - createdAt (timestamp): When the photo was submitted.
    - reviewedAt (timestamp): When the photo was reviewed (for approved/rejected)
    - reviewedBy (string): UID of the admin who reviewed the photo
    - rejectionReason (string): Optional reason for rejection
*/

/**
 * Fetches all photos from the gallery by status with pagination.
 * @param {string} status - "approved", "pending", "rejected", or "all"
 * @param {number} page - Page number (0-based)
 * @param {number} limit - Number of photos per page
 * @returns {Promise<object>}
 */
async function getGalleryPhotos(status = "approved", page = 0, limit = 12) {
    try {
        let query;
        if (status === "all") {
            query = db.collection("galleryPhotos")
                .orderBy("createdAt", "desc");
        } else {
            query = db.collection("galleryPhotos")
                .where("status", "==", status)
                .orderBy("createdAt", "desc");
        }
        
        // Apply pagination
        if (page > 0) {
            // For pagination, we need to get the last document from the previous page
            let prevPageQuery;
            if (status === "all") {
                prevPageQuery = db.collection("galleryPhotos")
                    .orderBy("createdAt", "desc")
                    .limit(page * limit);
            } else {
                prevPageQuery = db.collection("galleryPhotos")
                    .where("status", "==", status)
                    .orderBy("createdAt", "desc")
                    .limit(page * limit);
            }
            
            const prevPageSnapshot = await prevPageQuery.get();
            const lastDoc = prevPageSnapshot.docs[prevPageSnapshot.docs.length - 1];
            
            if (lastDoc) {
                query = query.startAfter(lastDoc);
            }
        }
        
        const snapshot = await query.limit(limit).get();
        const photos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        return { success: true, photos };
    } catch (error) {
        console.error("Error fetching gallery photos:", error);
        return { success: false, error: "Could not load photos." };
    }
}

/**
 * Fetches highlighted photos for the slideshow.
 * @returns {Promise<object>}
 */
async function getHighlightedPhotos() {
    try {
        // Avoid composite index by fetching highlighted approved and sorting client-side
        const snapshot = await db.collection("galleryPhotos")
            .where("status", "==", "approved")
            .where("isHighlighted", "==", true)
            .get();
        const photos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        photos.sort((a, b) => {
            const at = a.createdAt?.toDate ? a.createdAt.toDate() : new Date(a.createdAt || 0);
            const bt = b.createdAt?.toDate ? b.createdAt.toDate() : new Date(b.createdAt || 0);
            return bt - at;
        });
        return { success: true, photos };
    } catch (error) {
        console.error("Error fetching highlighted photos:", error);
        return { success: false, error: "Could not load highlighted photos." };
    }
}

/**
 * Toggles the highlighted status of a photo.
 * @param {string} photoId - The ID of the photo to toggle.
 * @param {boolean} isHighlighted - The new highlighted status.
 * @returns {Promise<object>}
 */
async function togglePhotoHighlight(photoId, isHighlighted) {
    try {
        await db.collection("galleryPhotos").doc(photoId).update({
            isHighlighted: isHighlighted
        });
        return { success: true };
    } catch (error) {
        console.error("Error toggling photo highlight:", error);
        return { success: false, error: "Could not update photo status." };
    }
}

/**
 * Saves a new photo for review by an administrator.
 * @param {string} caption - The photo caption.
 * @param {string} category - The photo category.
 * @param {File} file - The image file to upload.
 * @returns {Promise<object>}
 */
async function submitPhotoForReview(caption, category, file) {
    const user = auth.currentUser;
    if (!user) return { success: false, error: "You must be logged in to submit a photo." };

    try {
        // --- Cloudinary Upload Logic ---
        const cloudName = "dfkpmldma";
        const uploadPreset = "giki-chronicles";
        const url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;

        const formData = new FormData();
        formData.append("file", file);
        formData.append("upload_preset", uploadPreset);
        // NOTE: Keep minimal parameters for maximum compatibility with unsigned presets
        // If you want eager transformations, whitelist them in your unsigned preset
        // and then uncomment the next line:
        // formData.append("eager", "c_fill,w_1200,h_800,q_auto,f_auto");

        const response = await fetch(url, {
            method: "POST",
            body: formData,
        });

        if (!response.ok) {
            let detail = '';
            try { detail = await response.text(); } catch (_) {}
            throw new Error(`Image upload failed${detail ? `: ${detail}` : ''}`);
        }

        const data = await response.json();
        if (!data.secure_url) {
            throw new Error(`Upload response missing URL${data.error?.message ? `: ${data.error.message}` : ''}`);
        }
        const imageUrl = data.secure_url;
        const cloudinaryId = data.public_id;
        const fullSizeUrl = imageUrl; // Use original as full-size; add eager if preset supports it

        // --- Save to Firestore Gallery (Pending Review) ---
        await db.collection("galleryPhotos").add({
            imageUrl, // Thumbnail URL
            fullSizeUrl, // Full size URL
            caption,
            category,
            uploaderId: user.uid,
            uploaderName: user.displayName || user.email,
            cloudinaryId,
            isHighlighted: false, // Admin can change on approval
            status: "pending",
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        });

        return { success: true, message: "Photo submitted for review!" };

    } catch (error) {
        console.error("Error submitting photo:", error);
        return { success: false, error: "Failed to submit photo." };
    }
} 

// --- Admin Functions for Gallery Management ---

/**
 * Fetches photos by status for admin review with pagination.
 * @param {string} status - "pending", "approved", "rejected"
 * @param {number} page - Page number (0-based)
 * @param {number} limit - Number of photos per page
 * @returns {Promise<object>}
 */
async function getGalleryPhotosByStatus(status, page = 0, limit = 12) {
    try {
        let query = db.collection("galleryPhotos")
            .where("status", "==", status)
            .orderBy("createdAt", "desc");
        
        // Apply pagination
        if (page > 0) {
            // For pagination, we need to get the last document from the previous page
            const prevPageQuery = db.collection("galleryPhotos")
                .where("status", "==", status)
                .orderBy("createdAt", "desc")
                .limit(page * limit);
            
            const prevPageSnapshot = await prevPageQuery.get();
            const lastDoc = prevPageSnapshot.docs[prevPageSnapshot.docs.length - 1];
            
            if (lastDoc) {
                query = query.startAfter(lastDoc);
            }
        }
        
        const snapshot = await query.limit(limit).get();
        const photos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        return { success: true, photos };
    } catch (error) {
        console.error(`Error fetching ${status} gallery photos:`, error);
        return { success: false, error: `Could not load ${status} photos.` };
    }
}

/**
 * Updates the status of a gallery photo (approve/reject).
 * @param {string} photoId - The ID of the photo to update.
 * @param {string} newStatus - The new status ("approved", "rejected").
 * @param {object} options - Additional options like rejection reason, highlight status.
 * @returns {Promise<object>}
 */
async function updateGalleryPhotoStatus(photoId, newStatus, options = {}) {
    const user = auth.currentUser;
    if (!user) return { success: false, error: "Authentication required." };

    try {
        const updateData = { 
            status: newStatus,
            reviewedAt: firebase.firestore.FieldValue.serverTimestamp(),
            reviewedBy: user.uid
        };
        
        if (typeof options.isHighlighted === 'boolean') {
            updateData.isHighlighted = options.isHighlighted;
        }
        
        if (newStatus === "rejected" && options.rejectionReason) {
            updateData.rejectionReason = options.rejectionReason;
        }

        await db.collection("galleryPhotos").doc(photoId).update(updateData);
        return { success: true };
    } catch (error) {
        console.error("Error updating gallery photo status:", error);
        return { success: false, error: "Could not update status." };
    }
}

/**
 * Deletes a photo from both Firestore and Cloudinary.
 * @param {string} photoId - The ID of the photo to delete.
 * @param {string} cloudinaryId - The Cloudinary public ID.
 * @returns {Promise<object>}
 */
async function deleteGalleryPhoto(photoId, cloudinaryId) {
    const user = auth.currentUser;
    if (!user) return { success: false, error: "Authentication required." };

    try {
        // First, delete from Cloudinary
        if (cloudinaryId) {
            const cloudName = "dfkpmldma";
            const url = `https://api.cloudinary.com/v1_1/${cloudName}/image/destroy`;
            
            const formData = new FormData();
            formData.append("public_id", cloudinaryId);
            
            const response = await fetch(url, {
                method: "POST",
                body: formData,
            });

            if (!response.ok) {
                console.warn("Failed to delete from Cloudinary, but continuing with Firestore deletion");
            }
        }

        // Then delete from Firestore
        await db.collection("galleryPhotos").doc(photoId).delete();
        
        return { success: true, message: "Photo deleted successfully." };
    } catch (error) {
        console.error("Error deleting gallery photo:", error);
        return { success: false, error: "Could not delete photo." };
    }
}

/**
 * Gets photo statistics for admin dashboard.
 * @returns {Promise<object>}
 */
async function getGalleryStats() {
    try {
        const [approved, pending, rejected] = await Promise.all([
            db.collection("galleryPhotos").where("status", "==", "approved").get(),
            db.collection("galleryPhotos").where("status", "==", "pending").get(),
            db.collection("galleryPhotos").where("status", "==", "rejected").get()
        ]);

        return {
            success: true,
            stats: {
                approved: approved.size,
                pending: pending.size,
                rejected: rejected.size,
                total: approved.size + pending.size + rejected.size
            }
        };
    } catch (error) {
        console.error("Error fetching gallery stats:", error);
        return { success: false, error: "Could not load statistics." };
    }
}

// Legacy function for backward compatibility
async function getPendingGalleryPhotos() {
    return getGalleryPhotosByStatus("pending");
}

// gallery-admin.js
/**
 * gallery-admin.js
 * Handles admin functionality for photo gallery management
 */

let currentPhotoStatus = 'approved';
let currentPhoto = null;
let isAdmin = false;

// Pagination variables
let currentPage = 0;
const PHOTOS_PER_PAGE = 12;
let hasMorePhotos = true;
let isLoading = false;

// Initialize admin functionality
async function initializeGalleryAdmin() {
    // Check if user is admin
    const user = auth.currentUser;
    if (!user) {
        hideAdminInterface();
        // Load regular gallery for non-authenticated users
        loadRegularGallery();
        return;
    }

    try {
        const adminCheck = await isUserAdmin();
        isAdmin = adminCheck;
        
        if (isAdmin) {
            showAdminInterface();
            loadAdminStats();
            // Load approved photos for admin users
            await loadPhotosByStatus('approved');
        } else {
            hideAdminInterface();
            // Load regular gallery for non-admin users
            loadRegularGallery();
        }
    } catch (error) {
        console.error('Error checking admin status:', error);
        hideAdminInterface();
        // Load regular gallery on error
        loadRegularGallery();
    }
}

// Hide admin interface elements
function hideAdminInterface() {
    const adminPhotoTabs = document.getElementById('admin-photo-tabs');
    const adminStats = document.getElementById('admin-stats');
    
    if (adminPhotoTabs) {
        adminPhotoTabs.classList.add('hidden');
        adminPhotoTabs.classList.remove('md:flex');
    }
    
    if (adminStats) {
        adminStats.classList.add('hidden');
        adminStats.classList.remove('md:block');
    }
    
    // Re-render current photos to hide admin buttons
    if (currentPhotoStatus) {
        loadPhotosByStatus(currentPhotoStatus, currentPage, false);
    }
}

// Show admin interface elements
function showAdminInterface() {
    // Check if we're on the gallery page (these elements only exist on gallery.html)
    const adminPhotoTabs = document.getElementById('admin-photo-tabs');
    const adminStats = document.getElementById('admin-stats');
    
    if (adminPhotoTabs) {
        // Show admin tabs only for admins with responsive classes
        adminPhotoTabs.classList.remove('hidden');
        adminPhotoTabs.classList.add('md:flex');
    }
    
    if (adminStats) {
        // Show admin stats only for admins with responsive classes
        adminStats.classList.remove('hidden');
        adminStats.classList.add('md:block');
    }
    
    // Add event listeners for admin tabs (only if they exist)
    const tabApproved = document.getElementById('tab-approved');
    const tabPending = document.getElementById('tab-pending');
    const tabRejected = document.getElementById('tab-rejected');
    
    if (tabApproved) {
        tabApproved.addEventListener('click', () => switchPhotoTab('approved'));
        tabApproved.classList.add('bg-green-200');
    }
    
    if (tabPending) {
        tabPending.addEventListener('click', () => switchPhotoTab('pending'));
    }
    
    if (tabRejected) {
        tabRejected.addEventListener('click', () => switchPhotoTab('rejected'));
    }
    
    // Re-render current photos to show admin buttons
    if (currentPhotoStatus) {
        loadPhotosByStatus(currentPhotoStatus, currentPage, false);
    }
}

// Switch between photo status tabs
async function switchPhotoTab(status) {
    currentPhotoStatus = status;
    
    // Update tab styling (only if we're on the gallery page)
    const adminPhotoTabs = document.querySelector('#admin-photo-tabs');
    if (adminPhotoTabs) {
        adminPhotoTabs.querySelectorAll('button').forEach(btn => {
            btn.classList.remove('bg-green-200', 'bg-yellow-200', 'bg-red-200');
        });
        
        const activeTab = document.getElementById(`tab-${status}`);
        if (activeTab) {
            if (status === 'approved') activeTab.classList.add('bg-green-200');
            else if (status === 'pending') activeTab.classList.add('bg-yellow-200');
            else if (status === 'rejected') activeTab.classList.add('bg-red-200');
        }
    }
    
    // Load photos for selected status
    await loadPhotosByStatus(status);
}

// Load photos by status with pagination
async function loadPhotosByStatus(status, page = 0, append = false) {
    if (isLoading) return;
    isLoading = true;
    
    try {
        const result = await getGalleryPhotosByStatus(status, page, PHOTOS_PER_PAGE);
        if (result.success) {
            if (append) {
                appendPhotoGrid(result.photos, status);
            } else {
                renderPhotoGrid(result.photos, status);
            }
            hasMorePhotos = result.photos.length === PHOTOS_PER_PAGE;
            currentPage = page;
        } else {
            console.error('Error loading photos:', result.error);
        }
    } catch (error) {
        console.error('Error loading photos:', error);
    } finally {
        isLoading = false;
    }
}

// Load more photos (for infinite scroll)
async function loadMorePhotos() {
    if (!hasMorePhotos || isLoading) return;
    
    const nextPage = currentPage + 1;
    await loadPhotosByStatus(currentPhotoStatus, nextPage, true);
}

// Render photo grid with admin controls
function renderPhotoGrid(photos, status) {
    const grid = document.getElementById('gallery-grid');
    
    // Only proceed if we're on the gallery page
    if (!grid) {
        return;
    }
    
    grid.innerHTML = '';
    
    if (photos.length === 0) {
        grid.innerHTML = `
            <div class="col-span-full text-center py-12 text-gray-500">
                <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <h3 class="text-xl font-semibold mb-2">No ${status} photos</h3>
                <p>There are no ${status} photos to display.</p>
            </div>
        `;
        return;
    }
    
    photos.forEach(photo => {
        const photoCard = createPhotoCard(photo, status);
        grid.appendChild(photoCard);
    });
    
    // Add load more button if there are more photos
    if (hasMorePhotos) {
        addLoadMoreButton();
    }
    
    // Initialize lazy loading
    initializeLazyLoading();
}

// Append photos to existing grid (for pagination)
function appendPhotoGrid(photos, status) {
    const grid = document.getElementById('gallery-grid');
    
    // Only proceed if we're on the gallery page
    if (!grid) {
        return;
    }
    
    // Remove existing load more button
    const existingLoadMore = grid.querySelector('.load-more-container');
    if (existingLoadMore) {
        existingLoadMore.remove();
    }
    
    photos.forEach(photo => {
        const photoCard = createPhotoCard(photo, status);
        grid.appendChild(photoCard);
    });
    
    // Add load more button if there are more photos
    if (hasMorePhotos) {
        addLoadMoreButton();
    }
    
    // Initialize lazy loading for new images
    initializeLazyLoading();
}

// Add load more button
function addLoadMoreButton() {
    const grid = document.getElementById('gallery-grid');
    
    // Only proceed if we're on the gallery page
    if (!grid) {
        return;
    }
    
    const loadMoreContainer = document.createElement('div');
    loadMoreContainer.className = 'load-more-container col-span-full text-center py-8';
    loadMoreContainer.innerHTML = `
        <button onclick="loadMorePhotos()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
            Load More Photos
        </button>
    `;
    grid.appendChild(loadMoreContainer);
}

// Create photo card with admin controls
function createPhotoCard(photo, status) {
    const card = document.createElement('div');
    card.className = 'bg-white rounded-xl shadow-lg overflow-hidden transform hover:-translate-y-2 transition-transform duration-300';
    
    const photoDate = photo.createdAt ? photo.createdAt.toDate().toLocaleDateString() : 'N/A';
    const statusBadge = isAdmin ? getStatusBadge(status) : '';
    
    // Generate optimized image URLs with different sizes
    const imageUrl = photo.imageUrl;
    let optimizedImageUrl = imageUrl;
    
    if (imageUrl.includes('cloudinary')) {
        // Fix the Cloudinary URL transformation to preserve aspect ratio
        // Use c_scale instead of c_fill to maintain original proportions
        // Original: https://res.cloudinary.com/dfkpmldma/image/upload/v1754675533/ebpkauzzsw0cjngi32hm.jpg
        // Should be: https://res.cloudinary.com/dfkpmldma/image/upload/c_scale,w_400,q_auto,f_auto/v1754675533/ebpkauzzsw0cjngi32hm.jpg
        
        if (imageUrl.includes('/upload/')) {
            optimizedImageUrl = imageUrl.replace('/upload/', '/upload/c_scale,w_400,q_auto,f_auto/');
        } else {
            // Fallback if the URL structure is different
            optimizedImageUrl = imageUrl;
        }
    }
    
    // Only show admin buttons if user is admin
    const adminButtons = isAdmin ? `
        <div class="absolute top-2 right-2 flex space-x-2">
            ${status === 'pending' ? `
                <button onclick="approvePhoto('${photo.id}')" class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                </button>
                <button onclick="rejectPhoto('${photo.id}')" class="bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            ` : ''}
            <button onclick="deletePhoto('${photo.id}', '${photo.cloudinaryId}')" class="bg-gray-500 text-white p-2 rounded-full hover:bg-gray-600 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
            </button>
        </div>
    ` : '';
    
    // Use different click handlers for admin and non-admin users
    const clickHandler = isAdmin ? `onclick="openPhotoReview('${photo.id}')"` : `onclick="viewPhotoDetails('${photo.id}')"`;
    const detailsButtonClickHandler = isAdmin ? `onclick="openPhotoReview('${photo.id}')"` : `onclick="viewPhotoDetails('${photo.id}')"`;
    
    card.innerHTML = `
        <div class="relative">
            <img class="h-48 w-full object-cover cursor-pointer" 
                 loading="lazy"
                 src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23f3f4f6'/%3E%3C/svg%3E"
                 data-src="${optimizedImageUrl}"
                 alt="${photo.caption}" 
                 ${clickHandler}>
            ${statusBadge}
            ${adminButtons}
        </div>
        <div class="p-6">
            <div class="flex items-center justify-between mb-2">
                <p class="text-sm text-gray-500">${photoDate} • by ${photo.uploaderName}</p>
                <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">${photo.category}</span>
            </div>
            <h4 class="text-xl font-semibold mb-3">${photo.caption}</h4>
            ${isAdmin && photo.rejectionReason ? `<p class="text-sm text-red-600 mb-2"><strong>Rejection Reason:</strong> ${photo.rejectionReason}</p>` : ''}
            <button ${detailsButtonClickHandler} class="font-semibold text-blue-600 hover:underline">View Details &rarr;</button>
        </div>
    `;
    
    return card;
}

// Get status badge HTML
function getStatusBadge(status) {
    const badges = {
        approved: '<span class="absolute top-2 left-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full">Approved</span>',
        pending: '<span class="absolute top-2 left-2 bg-yellow-500 text-white text-xs px-2 py-1 rounded-full">Pending</span>',
        rejected: '<span class="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full">Rejected</span>'
    };
    return badges[status] || '';
}

// Load admin statistics
async function loadAdminStats() {
    const result = await getGalleryStats();
    if (result.success) {
        const stats = result.stats;
        
        // Update gallery page stats (if we're on gallery.html)
        const statsApproved = document.getElementById('stats-approved');
        const statsPending = document.getElementById('stats-pending');
        const statsRejected = document.getElementById('stats-rejected');
        
        if (statsApproved) {
            statsApproved.textContent = `Approved: ${stats.approved}`;
        }
        if (statsPending) {
            statsPending.textContent = `Pending: ${stats.pending}`;
        }
        if (statsRejected) {
            statsRejected.textContent = `Rejected: ${stats.rejected}`;
        }
        
        // Update admin page stats (if we're on admin.html)
        const adminStatsApproved = document.getElementById('stats-approved-photos');
        const adminStatsPending = document.getElementById('stats-pending-photos');
        const adminStatsRejected = document.getElementById('stats-rejected-photos');
        
        if (adminStatsApproved) {
            adminStatsApproved.textContent = stats.approved;
        }
        if (adminStatsPending) {
            adminStatsPending.textContent = stats.pending;
        }
        if (adminStatsRejected) {
            adminStatsRejected.textContent = stats.rejected;
        }
    }
}

// Open photo review modal
async function openPhotoReview(photoId) {
    // Check if user is admin
    if (!isAdmin) {
        return;
    }
    
    try {
        const doc = await db.collection("galleryPhotos").doc(photoId).get();
        if (!doc.exists) {
            alert('Photo not found');
            return;
        }
        
        currentPhoto = { id: photoId, ...doc.data() };
        
        const modal = document.getElementById('admin-review-modal');
        const content = document.getElementById('review-photo-content');
        
        // Only proceed if we're on the gallery page with the modal
        if (!modal || !content) {
            return;
        }
        
        content.innerHTML = `
            <div class="text-center">
                <img src="${currentPhoto.fullSizeUrl}" alt="${currentPhoto.caption}" class="max-w-full h-auto rounded-lg shadow-lg">
            </div>
            <div class="space-y-4">
                <div>
                    <h3 class="font-semibold text-lg">${currentPhoto.caption}</h3>
                    <p class="text-gray-600">${currentPhoto.category}</p>
                </div>
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div>
                        <strong>Uploaded by:</strong> ${currentPhoto.uploaderName}
                    </div>
                    <div>
                        <strong>Date:</strong> ${currentPhoto.createdAt ? currentPhoto.createdAt.toDate().toLocaleDateString() : 'N/A'}
                    </div>
                    <div>
                        <strong>Status:</strong> <span class="capitalize">${currentPhoto.status}</span>
                    </div>
                    ${currentPhoto.rejectionReason ? `
                        <div class="col-span-2">
                            <strong>Rejection Reason:</strong> ${currentPhoto.rejectionReason}
                        </div>
                    ` : ''}
                </div>
                <div class="flex items-center space-x-4">
                    <label class="flex items-center">
                        <input type="checkbox" id="highlight-photo" ${currentPhoto.isHighlighted ? 'checked' : ''} class="mr-2">
                        <span>Highlight in slideshow</span>
                    </label>
                </div>
            </div>
        `;
        
        modal.classList.remove('hidden');
        
        // Add event listeners
        const approveBtn = document.getElementById('approve-photo-btn');
        const rejectBtn = document.getElementById('reject-photo-btn');
        const closeBtn = document.getElementById('close-review-modal');
        
        if (approveBtn) approveBtn.onclick = () => approvePhoto(currentPhoto.id);
        if (rejectBtn) rejectBtn.onclick = () => rejectPhoto(currentPhoto.id);
        if (closeBtn) closeBtn.onclick = () => modal.classList.add('hidden');
        
    } catch (error) {
        console.error('Error opening photo review:', error);
        alert('Error loading photo details');
    }
}

// Approve photo
async function approvePhoto(photoId) {
    // Check if user is admin
    if (!isAdmin) {
        return;
    }
    
    if (!confirm('Are you sure you want to approve this photo?')) return;
    
    const isHighlighted = document.getElementById('highlight-photo')?.checked || false;
    
    const result = await updateGalleryPhotoStatus(photoId, 'approved', { isHighlighted });
    if (result.success) {
        alert('Photo approved successfully!');
        
        // Close modal if it exists
        const modal = document.getElementById('admin-review-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
        
        await switchPhotoTab(currentPhotoStatus);
        await loadAdminStats();
    } else {
        alert('Error approving photo: ' + result.error);
    }
}

// Reject photo
async function rejectPhoto(photoId) {
    // Check if user is admin
    if (!isAdmin) {
        return;
    }
    
    const modal = document.getElementById('rejection-modal');
    
    // Only proceed if we're on the gallery page with the modal
    if (!modal) {
        return;
    }
    
    modal.classList.remove('hidden');
    
    const confirmBtn = document.getElementById('confirm-rejection');
    const cancelBtn = document.getElementById('cancel-rejection');
    const reasonInput = document.getElementById('rejection-reason');
    
    if (confirmBtn) {
        confirmBtn.onclick = async () => {
            const reason = reasonInput ? reasonInput.value : '';
            
            const result = await updateGalleryPhotoStatus(photoId, 'rejected', { rejectionReason: reason });
            if (result.success) {
                alert('Photo rejected successfully!');
                modal.classList.add('hidden');
                
                // Close admin review modal if it exists
                const adminModal = document.getElementById('admin-review-modal');
                if (adminModal) {
                    adminModal.classList.add('hidden');
                }
                
                if (reasonInput) reasonInput.value = '';
                await switchPhotoTab(currentPhotoStatus);
                await loadAdminStats();
            } else {
                alert('Error rejecting photo: ' + result.error);
            }
        };
    }
    
    if (cancelBtn) {
        cancelBtn.onclick = () => {
            modal.classList.add('hidden');
            if (reasonInput) reasonInput.value = '';
        };
    }
}

// Delete photo
async function deletePhoto(photoId, cloudinaryId) {
    // Check if user is admin
    if (!isAdmin) {
        return;
    }
    
    const modal = document.getElementById('delete-photo-modal');
    
    // Only proceed if we're on the gallery page with the modal
    if (!modal) {
        return;
    }
    
    modal.classList.remove('hidden');
    
    const confirmBtn = document.getElementById('confirm-delete');
    const cancelBtn = document.getElementById('cancel-delete');
    
    if (confirmBtn) {
        confirmBtn.onclick = async () => {
            const result = await deleteGalleryPhoto(photoId, cloudinaryId);
            if (result.success) {
                alert('Photo deleted successfully!');
                modal.classList.add('hidden');
                await switchPhotoTab(currentPhotoStatus);
                await loadAdminStats();
            } else {
                alert('Error deleting photo: ' + result.error);
            }
        };
    }
    
    if (cancelBtn) {
        cancelBtn.onclick = () => {
            modal.classList.add('hidden');
        };
    }
}

// Initialize lazy loading - OPTIMIZED FOR SPEED
function initializeLazyLoading() {
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                observer.unobserve(img);
            }
        });
    }, {
        rootMargin: '300px 0px', // Much larger margin - start loading 300px before entering viewport
        threshold: 0.1 // Higher threshold - trigger when 10% of image is visible
    });

    // Observe all lazy images
    document.querySelectorAll('img[data-src]').forEach(img => {
        imageObserver.observe(img);
    });
}

// Load regular gallery (approved photos) for all users
async function loadRegularGallery() {
    try {
        const result = await getGalleryPhotosByStatus('approved', 0, PHOTOS_PER_PAGE);
        if (result.success) {
            renderPhotoGrid(result.photos, 'approved');
            hasMorePhotos = result.photos.length === PHOTOS_PER_PAGE;
            currentPage = 0;
            currentPhotoStatus = 'approved';
        } else {
            console.error('Error loading regular gallery:', result.error);
        }
    } catch (error) {
        console.error('Error loading regular gallery:', error);
    }
}

// View photo details for non-admin users
async function viewPhotoDetails(photoId) {
    try {
        const doc = await db.collection("galleryPhotos").doc(photoId).get();
        if (!doc.exists) {
            alert('Photo not found');
            return;
        }
        
        const photo = { id: photoId, ...doc.data() };
        
        // Create a simple modal for non-admin users
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.innerHTML = `
            <div class="bg-white rounded-lg p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Photo Details</h2>
                    <button onclick="this.closest('.fixed').remove()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div class="space-y-6">
                    <div class="text-center">
                        <img src="${photo.fullSizeUrl || photo.imageUrl}" alt="${photo.caption}" class="max-w-full h-auto rounded-lg shadow-lg">
                    </div>
                    <div class="space-y-4">
                        <div>
                            <h3 class="font-semibold text-lg">${photo.caption}</h3>
                            <p class="text-gray-600">${photo.category}</p>
                        </div>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div>
                                <strong>Uploaded by:</strong> ${photo.uploaderName}
                            </div>
                            <div>
                                <strong>Date:</strong> ${photo.createdAt ? photo.createdAt.toDate().toLocaleDateString() : 'N/A'}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Close modal when clicking outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
    } catch (error) {
        console.error('Error viewing photo details:', error);
        alert('Error loading photo details');
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Hide admin interface immediately to prevent flash of admin elements
    hideAdminInterface();
    
    // Wait for auth to be ready
    auth.onAuthStateChanged((user) => {
        if (user) {
            initializeGalleryAdmin();
        } else {
            // Ensure admin interface is hidden for logged out users
            hideAdminInterface();
        }
    });
    
    // Initialize lazy loading for any existing images
    initializeLazyLoading();
});


// script.js
/*
    JavaScript for GIKI Chronicles Blog
    Handles main page logic, view switching, and initializes modules.
*/

document.addEventListener('DOMContentLoaded', () => {

    // --- Element Selections ---
    // Sidebar elements
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.getElementById('sidebar');
    const sidebarClose = document.getElementById('sidebar-close');
    const sidebarOverlay = document.getElementById('sidebar-overlay');
    
    // Legacy mobile menu elements (keeping for compatibility)
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const homeTab = document.getElementById('home-tab');
    const eventsTab = document.getElementById('events-tab');
    const mobileHomeTab = document.getElementById('mobile-home-tab');
    const mobileEventsTab = document.getElementById('mobile-events-tab');
    const blogContent = document.getElementById('blog-content');
    const eventsContent = document.getElementById('events-content');

    // Event Details Modal elements
    const eventModal = document.getElementById('event-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalDate = document.getElementById('modal-date');
    const modalDescription = document.getElementById('modal-description');
    const googleCalendarLink = document.getElementById('google-calendar-link');
    const modalClose = document.getElementById('modal-close');
    const editEventButton = document.getElementById('edit-event-button');
    const deleteEventButton = document.getElementById('delete-event-button');

    // Add Event Modal elements
    const addEventModal = document.getElementById('add-event-modal');
    const addEventButton = document.getElementById('add-event-button');
    const addEventModalClose = document.getElementById('add-event-modal-close');
    const addEventForm = document.getElementById('add-event-form');

    // Edit Event Modal elements
    const editEventModal = document.getElementById('edit-event-modal');
    const editEventModalClose = document.getElementById('edit-event-modal-close');
    const editEventForm = document.getElementById('edit-event-form');

    // Delete Confirmation Modal elements
    const deleteConfirmModal = document.getElementById('delete-confirm-modal');
    const confirmDeleteButton = document.getElementById('confirm-delete-button');
    const cancelDeleteButton = document.getElementById('cancel-delete-button');

    let calendarInstance = null;
    let currentOpenEvent = null;

    // --- Modal Functions ---
    function openEventModal(event) {
        currentOpenEvent = event; // Store the event for potential editing or deletion
        const startDate = new Date(event.date);
        const endDate = new Date(startDate.getTime() + 2 * 60 * 60 * 1000);
        const formatGoogleDate = (date) => date.toISOString().replace(/-|:|\.\d+/g, '');
        const googleCalendarUrl = `https://www.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.title)}&dates=${formatGoogleDate(startDate)}/${formatGoogleDate(endDate)}&details=${encodeURIComponent(event.description)}&location=GIK%20Institute,%20Topi,%20Pakistan`;

        modalTitle.textContent = event.title;
        modalDate.textContent = startDate.toLocaleString('default', { dateStyle: 'full', timeStyle: 'short' });
        modalDescription.textContent = event.description;
        googleCalendarLink.href = googleCalendarUrl;

        eventModal.classList.remove('hidden');
    }

    function closeEventModal() {
        if (eventModal) eventModal.classList.add('hidden');
        currentOpenEvent = null;
    }

    function openAddEventModal() {
        if (addEventModal) addEventModal.classList.remove('hidden');
    }

    function closeAddEventModal() {
        if (addEventModal) addEventModal.classList.add('hidden');
    }

    function openEditEventModal(event) {
        if (!event) return;
        const eventDate = new Date(event.date);
        // Format date for datetime-local input (YYYY-MM-DDTHH:mm)
        const localDateTime = new Date(eventDate.getTime() - (eventDate.getTimezoneOffset() * 60000)).toISOString().slice(0, 16);

        document.getElementById('edit-event-id').value = event.id;
        document.getElementById('edit-event-title').value = event.title;
        document.getElementById('edit-event-date').value = localDateTime;
        document.getElementById('edit-event-description').value = event.description;

        closeEventModal(); // Close the details modal first
        if (editEventModal) editEventModal.classList.remove('hidden');
    }

    function closeEditEventModal() {
        if (editEventModal) editEventModal.classList.add('hidden');
    }

    function openDeleteConfirmModal() {
        closeEventModal();
        if (deleteConfirmModal) deleteConfirmModal.classList.remove('hidden');
    }

    function closeDeleteConfirmModal() {
        if (deleteConfirmModal) deleteConfirmModal.classList.add('hidden');
    }

    // --- Calendar Initialization ---
    function initializeCalendar() {
        if (calendarInstance) {
            calendarInstance.render();
            return;
        }

        const calendarContainer = document.getElementById('calendar-container');
        const calendarTitle = document.getElementById('calendar-title');

        if (calendarContainer && calendarTitle && typeof Calendar !== 'undefined') {
            calendarInstance = new Calendar({
                container: calendarContainer,
                titleElement: calendarTitle,
                onEventClick: openEventModal
            });

            document.getElementById('prev-button').addEventListener('click', () => calendarInstance.previous());
            document.getElementById('next-button').addEventListener('click', () => calendarInstance.next());
            document.getElementById('year-view-button').addEventListener('click', () => calendarInstance.setView('year'));
            document.getElementById('month-view-button').addEventListener('click', () => calendarInstance.setView('month'));
            document.getElementById('week-view-button').addEventListener('click', () => calendarInstance.setView('week'));
            document.getElementById('day-view-button').addEventListener('click', () => calendarInstance.setView('day'));

            calendarInstance.render();
        } else {
            console.error("Calendar dependencies not found.");
        }
    }

    // --- Page View Switching ---
    function switchPage(view) {
        const showEvents = view === 'events';
        
        if (blogContent) {
            blogContent.classList.toggle('hidden', showEvents);
        }
        if (eventsContent) {
            eventsContent.classList.toggle('hidden', !showEvents);
        }

        document.querySelectorAll('#home-tab, #mobile-home-tab').forEach(tab => {
            if (tab) {
                tab.classList.toggle('text-blue-600', !showEvents);
                tab.classList.toggle('font-semibold', !showEvents);
            }
        });
        document.querySelectorAll('#events-tab, #mobile-events-tab').forEach(tab => {
            if (tab) {
                tab.classList.toggle('text-blue-600', showEvents);
                tab.classList.toggle('font-semibold', showEvents);
            }
        });

        if (showEvents) {
            initializeCalendar();
        }

        if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
            mobileMenu.classList.add('hidden');
        }
    }

    // --- Sidebar Functions ---
    function openSidebar() {
        if (sidebar) sidebar.classList.remove('-translate-x-full');
        if (sidebarOverlay) sidebarOverlay.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeSidebar() {
        if (sidebar) sidebar.classList.add('-translate-x-full');
        if (sidebarOverlay) sidebarOverlay.classList.add('hidden');
        document.body.style.overflow = '';
    }

    // --- Event Listeners ---
    // Sidebar listeners
    if (sidebarToggle) sidebarToggle.addEventListener('click', openSidebar);
    if (sidebarClose) sidebarClose.addEventListener('click', closeSidebar);
    if (sidebarOverlay) sidebarOverlay.addEventListener('click', closeSidebar);
    
    // Close sidebar when clicking on a link
    document.querySelectorAll('#sidebar a').forEach(link => {
        link.addEventListener('click', () => {
            setTimeout(closeSidebar, 100); // Small delay to allow navigation
        });
    });

    // Mobile Calendar Dropdown functionality
    const sidebarCalendarDropdownToggle = document.getElementById('sidebar-calendar-dropdown-toggle');
    const sidebarCalendarDropdown = document.getElementById('sidebar-calendar-dropdown');
    const sidebarCalendarDropdownArrow = document.getElementById('sidebar-calendar-dropdown-arrow');

    function toggleCalendarDropdown() {
        if (sidebarCalendarDropdown && sidebarCalendarDropdownArrow) {
            const isHidden = sidebarCalendarDropdown.classList.contains('hidden');
            
            if (isHidden) {
                sidebarCalendarDropdown.classList.remove('hidden');
                sidebarCalendarDropdownArrow.style.transform = 'rotate(180deg)';
            } else {
                sidebarCalendarDropdown.classList.add('hidden');
                sidebarCalendarDropdownArrow.style.transform = 'rotate(0deg)';
            }
        }
    }

    if (sidebarCalendarDropdownToggle) {
        sidebarCalendarDropdownToggle.addEventListener('click', (e) => {
            e.preventDefault();
            toggleCalendarDropdown();
        });
    }

    // Legacy mobile menu listeners
    if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));
    }

    if (homeTab) homeTab.addEventListener('click', (e) => { e.preventDefault(); switchPage('blog'); });
    if (eventsTab) eventsTab.addEventListener('click', (e) => { e.preventDefault(); switchPage('events'); });
    if (mobileHomeTab) mobileHomeTab.addEventListener('click', (e) => { e.preventDefault(); switchPage('blog'); });
    if (mobileEventsTab) mobileEventsTab.addEventListener('click', (e) => { e.preventDefault(); switchPage('events'); });

    // Event Details Modal Listeners
    if (modalClose) modalClose.addEventListener('click', closeEventModal);
    if (eventModal) eventModal.addEventListener('click', (e) => { if (e.target === eventModal) closeEventModal(); });
    if (editEventButton) editEventButton.addEventListener('click', () => openEditEventModal(currentOpenEvent));
    if (deleteEventButton) deleteEventButton.addEventListener('click', openDeleteConfirmModal);

    // Add Event Modal Listeners
    if (addEventButton) addEventButton.addEventListener('click', openAddEventModal);
    if (addEventModalClose) addEventModalClose.addEventListener('click', closeAddEventModal);
    if (addEventModal) addEventModal.addEventListener('click', (e) => { if (e.target === addEventModal) closeAddEventModal(); });

    if (addEventForm) addEventForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(addEventForm);
        const newEvent = {
            title: formData.get('title'),
            date: new Date(formData.get('date')).toISOString(),
            description: formData.get('description')
        };

        if (calendarInstance) {
            calendarInstance.addEvent(newEvent);
        }

        addEventForm.reset();
        closeAddEventModal();
    });

    // Edit Event Modal Listeners
    if (editEventModalClose) editEventModalClose.addEventListener('click', closeEditEventModal);
    if (editEventModal) editEventModal.addEventListener('click', (e) => { if (e.target === editEventModal) closeEditEventModal(); });

    if (editEventForm) editEventForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(editEventForm);
        const updatedEvent = {
            id: parseInt(formData.get('id')),
            title: formData.get('title'),
            date: new Date(formData.get('date')).toISOString(),
            description: formData.get('description')
        };

        if (calendarInstance) {
            calendarInstance.editEvent(updatedEvent);
        }

        editEventForm.reset();
        closeEditEventModal();
    });

    // Delete Confirmation Modal Listeners
    if (cancelDeleteButton) cancelDeleteButton.addEventListener('click', closeDeleteConfirmModal);
    if (deleteConfirmModal) deleteConfirmModal.addEventListener('click', (e) => { if (e.target === deleteConfirmModal) closeDeleteConfirmModal(); });
    if (confirmDeleteButton) confirmDeleteButton.addEventListener('click', () => {
        if (calendarInstance && currentOpenEvent) {
            calendarInstance.deleteEvent(currentOpenEvent.id);
        }
        closeDeleteConfirmModal();
    });

    // --- Initial State ---
    switchPage('blog'); // Start on the blog view
});


// app.js
/**
 * app.js
 * This is the main application script. It handles the integration
 * of frontend elements with the backend functions.
 */

document.addEventListener('DOMContentLoaded', async () => {
    // Wait a bit for Firebase to initialize
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Check if user data needs to be loaded
    if (typeof window.ensureUserDataLoaded === 'function') {
        try {
            const currentUser = firebase.auth().currentUser;
            if (currentUser) {
                await window.ensureUserDataLoaded();
            }
        } catch (error) {
            console.error("App.js: Error ensuring user data loaded on page load:", error);
        }
    }
    
    // --- Initialize Quill Editor ---
    let quill;
    if (document.getElementById('editor-container')) {
        // Clear any existing Quill instances
        const existingEditor = document.querySelector('.ql-editor');
        if (existingEditor) {
            existingEditor.remove();
        }
        
        // Clear the container
        const container = document.getElementById('editor-container');
        container.innerHTML = '';
        
        // Initialize new Quill instance
        quill = new Quill('#editor-container', {
            theme: 'snow',
            placeholder: 'Craft your story here...',
            modules: { toolbar: [[{ 'header': [1, 2, 3, false] }], ['bold', 'italic', 'underline'], [{ 'list': 'ordered' }, { 'list': 'bullet' }], ['link', 'image'], ['clean']] }
        });
    }

    // --- Authentication Logic (Login, Signup, Google) ---
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const result = await loginUser(loginForm.email.value, loginForm.password.value);
            if (result.success) window.location.href = 'index.html';
            else document.getElementById('error-message').textContent = result.error;
        });
    }
    const signupForm = document.getElementById('signup-form');
    if (signupForm) {
        signupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const result = await signUpUser(signupForm.email.value, signupForm.password.value);
            if (result.success) window.location.href = 'index.html';
            else document.getElementById('error-message').textContent = result.error;
        });
    }
    const googleSignInButton = document.getElementById('google-signin-button');
    if (googleSignInButton) {
        googleSignInButton.addEventListener('click', async () => {
            const result = await signInWithGoogle();
            if (result.success) window.location.href = 'index.html';
            else if (document.getElementById('error-message')) document.getElementById('error-message').textContent = result.error;
        });
    }

    // --- Post Form Logic (Handles both Create and Edit) ---
    const postForm = document.getElementById('post-form');
    if (postForm) {
        // Clear form message when user starts typing
        const clearFormMessage = () => {
            const formMessage = document.getElementById('form-message');
            if (formMessage && formMessage.textContent.includes('submitted successfully')) {
                // Don't clear success messages immediately - let them stay visible
                return;
            }
            if (formMessage && formMessage.textContent) {
                formMessage.textContent = '';
                formMessage.className = 'text-center min-h-[1.25rem] py-2 px-3 rounded-lg transition-all duration-300';
            }
        };
        
        // Add event listeners to clear message when user starts editing
        const titleInput = document.getElementById('post-title');
        if (titleInput) {
            titleInput.addEventListener('input', clearFormMessage);
        }
        
        if (quill) {
            quill.on('text-change', clearFormMessage);
        }
        const urlParams = new URLSearchParams(window.location.search);
        const postIdToEdit = urlParams.get('edit');
        if (postIdToEdit) {
            document.getElementById('page-title').textContent = 'Edit Your Post';
            document.getElementById('page-subtitle').textContent = 'Make your changes and resubmit for review.';
            document.getElementById('submit-post-button').textContent = 'Update Post';
            document.getElementById('post-id').value = postIdToEdit;
            const loadPostForEditing = async () => {
                const result = await getPostForEditing(postIdToEdit);
                if (result.success) {
                    const post = result.post;
                    document.getElementById('post-title').value = post.title;
                    document.getElementById('post-description').value = post.description || '';
                    document.getElementById('post-photo-url').value = post.photoUrl || '';
                    document.getElementById('post-genre').value = post.genre || 'General';
                    document.getElementById('post-tags').value = post.tags ? post.tags.join(', ') : '';
                    quill.root.innerHTML = post.content;
                    
                    // If there's a photo URL, show it in the URL tab
                    if (post.photoUrl) {
                        if (urlTab && uploadTab) {
                            urlTab.click();
                        }
                    }
                } else {
                    document.getElementById('form-message').textContent = result.error;
                }
            };
            loadPostForEditing();
        }
        // --- Image Upload Functionality ---
        let uploadedImageUrl = null; // Store the uploaded image URL
        
        // Tab switching functionality
        const urlTab = document.getElementById('url-tab');
        const uploadTab = document.getElementById('upload-tab');
        const urlSection = document.getElementById('url-section');
        const uploadSection = document.getElementById('upload-section');
        
        if (urlTab && uploadTab) {
            urlTab.addEventListener('click', () => {
                urlTab.className = 'flex-1 py-2 px-3 text-sm font-medium bg-blue-600 text-white transition-colors';
                uploadTab.className = 'flex-1 py-2 px-3 text-sm font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors';
                urlSection.classList.remove('hidden');
                uploadSection.classList.add('hidden');
                // Clear uploaded image when switching to URL
                uploadedImageUrl = null;
            });
            
            uploadTab.addEventListener('click', () => {
                uploadTab.className = 'flex-1 py-2 px-3 text-sm font-medium bg-blue-600 text-white transition-colors';
                urlTab.className = 'flex-1 py-2 px-3 text-sm font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors';
                uploadSection.classList.remove('hidden');
                urlSection.classList.add('hidden');
                // Clear URL input when switching to upload
                document.getElementById('post-photo-url').value = '';
            });
        }
        
        // File upload handling
        const fileInput = document.getElementById('post-photo-file');
        const uploadProgress = document.getElementById('upload-progress');
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');
        const uploadStatus = document.getElementById('upload-status');
        const uploadPreview = document.getElementById('upload-preview');
        const previewImage = document.getElementById('preview-image');
        const uploadedUrlSpan = document.getElementById('uploaded-url');
        const removeUploadBtn = document.getElementById('remove-upload');
        const uploadZone = document.querySelector('.border-dashed');
        
        // Upload function to avoid code duplication
        const uploadImage = async (file) => {
            // Validate file type
            if (!file.type.startsWith('image/')) {
                alert('Please select a valid image file.');
                return;
            }
            
            // Validate file size (10MB limit)
            if (file.size > 10 * 1024 * 1024) {
                alert('File size must be less than 10MB.');
                return;
            }
            
            // Show upload progress
            uploadProgress.classList.remove('hidden');
            uploadStatus.textContent = 'Uploading to Cloudinary...';
            
            try {
                // Upload to Cloudinary
                const cloudName = "dfkpmldma";
                const uploadPreset = "giki-chronicles";
                const url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;
                
                const formData = new FormData();
                formData.append("file", file);
                formData.append("upload_preset", uploadPreset);
                
                // Simulate progress (Cloudinary doesn't provide real-time progress)
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressBar.style.width = `${progress}%`;
                    progressText.textContent = `${Math.round(progress)}%`;
                }, 200);
                
                const response = await fetch(url, {
                    method: "POST",
                    body: formData,
                });
                
                clearInterval(progressInterval);
                
                if (!response.ok) {
                    throw new Error(`Upload failed: ${response.status}`);
                }
                
                const data = await response.json();
                uploadedImageUrl = data.secure_url;
                
                // Show completion
                progressBar.style.width = '100%';
                progressText.textContent = '100%';
                uploadStatus.textContent = 'Upload complete!';
                
                // Show preview
                previewImage.src = uploadedImageUrl;
                uploadedUrlSpan.textContent = uploadedImageUrl;
                uploadPreview.classList.remove('hidden');
                
                // Hide progress after a moment
                setTimeout(() => {
                    uploadProgress.classList.add('hidden');
                }, 2000);
                
            } catch (error) {
                console.error('Upload error:', error);
                uploadStatus.textContent = 'Upload failed. Please try again.';
                progressBar.style.width = '0%';
                progressText.textContent = '0%';
                
                setTimeout(() => {
                    uploadProgress.classList.add('hidden');
                }, 3000);
            }
        };
        
        if (fileInput) {
            fileInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                if (!file) return;
                await uploadImage(file);
            });
        }
        
        // Drag and drop functionality
        if (uploadZone) {
            uploadZone.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadZone.classList.add('dragover');
            });
            
            uploadZone.addEventListener('dragleave', (e) => {
                e.preventDefault();
                uploadZone.classList.remove('dragover');
            });
            
            uploadZone.addEventListener('drop', async (e) => {
                e.preventDefault();
                uploadZone.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    await uploadImage(files[0]);
                }
            });
        }
        
        // Remove uploaded image
        if (removeUploadBtn) {
            removeUploadBtn.addEventListener('click', () => {
                uploadedImageUrl = null;
                fileInput.value = '';
                uploadPreview.classList.add('hidden');
                uploadProgress.classList.add('hidden');
            });
        }
        
        postForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formMessage = document.getElementById('form-message');
            if (!quill || quill.getLength() <= 1) {
                formMessage.textContent = 'Please write some content for your post.';
                formMessage.className = 'text-center h-5 text-red-600 font-medium';
                return;
            }
            formMessage.textContent = 'Submitting...';
            formMessage.className = 'text-center min-h-[1.25rem] py-2 px-3 rounded-lg transition-all duration-300 text-blue-600 font-medium bg-blue-50 border border-blue-200';
            
            // Get photo URL from either URL input or uploaded image
            let photoUrl = '';
            if (uploadedImageUrl) {
                photoUrl = uploadedImageUrl;
            } else {
                photoUrl = document.getElementById('post-photo-url').value;
            }
            
            const postData = {
                title: document.getElementById('post-title').value,
                description: document.getElementById('post-description').value,
                photoUrl: photoUrl,
                genre: document.getElementById('post-genre').value,
                tags: document.getElementById('post-tags').value,
                content: quill.root.innerHTML
            };
            let result;
            const postId = document.getElementById('post-id').value;
            if (postId) {
                result = await updatePost(postId, postData);
            } else {
                result = await createPost(postData);
            }
            if (result.success) {
                formMessage.textContent = '✅ Your post has been submitted successfully! It will be reviewed and approved if it matches our guidelines.';
                formMessage.className = 'text-center min-h-[1.25rem] py-2 px-3 rounded-lg transition-all duration-300 text-green-600 font-medium bg-green-50 border border-green-200';
                
                // Delay clearing the form to let user see the success message
                setTimeout(() => {
                    // Clear the form for a new post
                    document.getElementById('post-title').value = '';
                    document.getElementById('post-description').value = '';
                    document.getElementById('post-photo-url').value = '';
                    document.getElementById('post-genre').value = 'General';
                    document.getElementById('post-tags').value = '';
                    quill.setText('');
                    
                    // Clear uploaded image
                    uploadedImageUrl = null;
                    if (fileInput) fileInput.value = '';
                    if (uploadPreview) uploadPreview.classList.add('hidden');
                    if (uploadProgress) uploadProgress.classList.add('hidden');
                    
                    // Reset to URL tab
                    if (urlTab && uploadTab) {
                        urlTab.click();
                    }
                    // Clear the hidden post ID if it was set
                    document.getElementById('post-id').value = '';
                    // Reset button text
                    document.getElementById('submit-post-button').textContent = 'Submit for Review';
                    // Reset page title and subtitle
                    document.getElementById('page-title').textContent = 'Blog Editor';
                    document.getElementById('page-subtitle').textContent = 'Your one-stop hub for student life, engineering marvels, and campus tales at GIKI Institute.';
                    
                    // Clear the success message after form is cleared
                    setTimeout(() => {
                        formMessage.textContent = '';
                        formMessage.className = 'text-center min-h-[1.25rem] py-2 px-3 rounded-lg transition-all duration-300';
                    }, 2000); // Keep message visible for 2 more seconds after form clear
                }, 3000); // Wait 3 seconds before clearing form
            } else {
                formMessage.textContent = result.error;
                formMessage.className = 'text-center min-h-[1.25rem] py-2 px-3 rounded-lg transition-all duration-300 text-red-600 font-medium bg-red-50 border border-red-200';
            }
        });

        // --- Preview Button Functionality ---
        const previewButton = document.getElementById('preview-post-button');
        if (previewButton) {
            previewButton.addEventListener('click', () => {
                // Get current form data
                const title = document.getElementById('post-title').value || 'Untitled Post';
                const description = document.getElementById('post-description').value || 'No description provided';
                const content = quill ? quill.root.innerHTML : '<p>No content yet...</p>';
                
                // Get photo URL from either URL input or uploaded image
                let photoUrl = '';
                if (uploadedImageUrl) {
                    photoUrl = uploadedImageUrl;
                } else {
                    photoUrl = document.getElementById('post-photo-url').value;
                }
                
                const genre = document.getElementById('post-genre').value || 'General';
                const tags = document.getElementById('post-tags').value || '';
                
                // Create preview HTML
                const previewHTML = `
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Preview: ${title}</title>
                        <script src="https://cdn.tailwindcss.com"></script>
                        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
                        <style>
                            body { font-family: 'Inter', sans-serif; }
                            .ql-editor { font-size: 1.125rem; line-height: 1.75; }
                            .ql-editor h1, .ql-editor h2, .ql-editor h3 { margin-top: 1.5rem; margin-bottom: 0.75rem; }
                            .ql-editor p { margin-bottom: 1rem; }
                            .ql-editor ul, .ql-editor ol { margin-bottom: 1rem; padding-left: 1.5rem; }
                            .ql-editor blockquote { border-left: 4px solid #e5e7eb; padding-left: 1rem; margin: 1rem 0; }
                        </style>
                    </head>
                    <body class="bg-gray-50">
                        <div class="container mx-auto px-4 py-8 max-w-4xl">
                            <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                                ${photoUrl ? `<img src="${photoUrl}" alt="Featured Image" class="w-full h-64 object-cover">` : ''}
                                <div class="p-8">
                                    <div class="mb-6">
                                        <h1 class="text-4xl font-bold text-gray-800 mb-4">${title}</h1>
                                        <p class="text-lg text-gray-600 mb-4">${description}</p>
                                        <div class="flex items-center space-x-4 text-sm text-gray-500">
                                            <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full">${genre}</span>
                                            ${tags ? `<span class="text-gray-600">Tags: ${tags}</span>` : ''}
                                        </div>
                                    </div>
                                    <div class="prose max-w-none">
                                        <div class="ql-editor">${content}</div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-8 text-center">
                                <button onclick="window.close()" class="bg-gray-600 text-white px-6 py-2 rounded-lg hover:bg-gray-700 transition-colors">
                                    Close Preview
                                </button>
                            </div>
                        </div>
                    </body>
                    </html>
                `;
                
                // Open preview in new window
                const previewWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');
                previewWindow.document.write(previewHTML);
                previewWindow.document.close();
            });
        }
    }

    // Define loadProfileData function globally so it can be called from anywhere
    const loadProfileData = async (user) => {
        if (!user) return;
        
        // Only run profile-specific code if we're on the profile page
        const isProfilePage = document.getElementById('profile-form') !== null;
        
        // Early return if not on profile page to prevent unnecessary processing
        if (!isProfilePage) {
            return;
        }
        
        const result = await getUserProfile(user.uid);
        if (result.success) {
            const profile = result.profile;
            
            // Only update form elements if they exist (profile page)
            if (isProfilePage) {
                const displayNameInput = document.getElementById('display-name');
                const userEmailInput = document.getElementById('user-email');
                const userBioInput = document.getElementById('user-bio');
                const profilePicImg = document.getElementById('profile-pic');
                
                if (displayNameInput) displayNameInput.value = profile.displayName || '';
                if (userEmailInput) userEmailInput.value = profile.email || '';
                if (userBioInput) userBioInput.value = profile.bio || '';
                if (profile.photoURL && profilePicImg) {
                    profilePicImg.src = profile.photoURL;
                }
            }
        } else {
            const newProfile = {
                uid: user.uid,
                email: user.email,
                displayName: user.displayName || user.email.split('@')[0],
                photoURL: user.photoURL || '',
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            await db.collection('users').doc(user.uid).set(newProfile);
            // Don't recursively call loadProfileData to avoid infinite loops
        }
    };

    // --- Profile Page Logic ---
    const profileForm = document.getElementById('profile-form');
    
    if (profileForm) {
        const displayNameInput = document.getElementById('display-name');
        const userEmailInput = document.getElementById('user-email');
        const userBioInput = document.getElementById('user-bio');
        const profilePicImg = document.getElementById('profile-pic');
        const photoUploadButton = document.querySelector('#profile-pic + button');
        const photoUploadInput = document.getElementById('photo-upload');
        const formMessage = document.getElementById('form-message');
        if (photoUploadButton) {
            photoUploadButton.addEventListener('click', () => photoUploadInput.click());
        }
        if (photoUploadInput) {
            photoUploadInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                const user = auth.currentUser;
                if (file && user) {
                    formMessage.textContent = 'Uploading...';
                    const uploadResult = await uploadProfilePicture(user.uid, file);
                    if (uploadResult.success) {
                        await updateUserProfile(user.uid, { photoURL: uploadResult.url });
                        profilePicImg.src = uploadResult.url;
                        formMessage.textContent = 'Photo updated!';
                    } else {
                        formMessage.textContent = uploadResult.error;
                    }
                }
            });
        }
        profileForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const user = auth.currentUser;
            if (user) {
                formMessage.textContent = 'Saving...';
                const profileData = {
                    displayName: displayNameInput.value,
                    bio: userBioInput.value
                };
                const result = await updateUserProfile(user.uid, profileData);
                if (result.success) {
                    formMessage.textContent = 'Profile saved successfully!';
                } else {
                    formMessage.textContent = result.error;
                }
            }
        });
        const loadUserPosts = async (user) => {
            if (!user) return;
            const myPostsContainer = document.getElementById('my-posts-container');
            if (!myPostsContainer) return;
            const result = await getPostsByAuthor(user.uid);
            myPostsContainer.innerHTML = '';
            if (result.success && result.posts.length > 0) {
                result.posts.forEach(post => {
                    const postElement = document.createElement('div');
                    postElement.className = 'flex justify-between items-center p-4 border rounded-lg';
                    let statusColor = 'bg-yellow-200 text-yellow-800';
                    if (post.status === 'approved') {
                        statusColor = 'bg-green-200 text-green-800';
                    } else if (post.status === 'rejected') {
                        statusColor = 'bg-red-200 text-red-800';
                    }
                    postElement.innerHTML = `
                        <div>
                            <a href="post.html?id=${post.id}" class="font-bold text-lg hover:text-blue-600">${post.title}</a>
                            <p class="text-sm text-gray-500 mt-1">Status: 
                                <span class="px-2 py-1 rounded-full text-xs font-semibold ${statusColor}">${post.status}</span>
                            </p>
                        </div>
                        <a href="write.html?edit=${post.id}" class="text-sm font-semibold text-blue-600 hover:underline">Edit</a>
                    `;
                    myPostsContainer.appendChild(postElement);
                });
            } else {
                myPostsContainer.innerHTML = '<p class="text-gray-500">You have not written any posts yet.</p>';
            }
        };
        onAuthStateChange(user => {
            if (user) {
                loadUserPosts(user);
            } else {
                window.location.href = 'login.html';
            }
        });
    }

    // --- Homepage Logic ---
    const recentPostsGrid = document.getElementById('recent-posts-grid');
    if (recentPostsGrid) {
        const displayFeaturedPost = async () => {
            const result = await getFeaturedPost();
            if (result.success) {
                const post = result.post;
                const featuredPostContainer = document.getElementById('featured-post');
                if (featuredPostContainer) {
                    featuredPostContainer.innerHTML = `
                        <div class="bg-white rounded-xl shadow-lg overflow-hidden lg:flex">
                            <div class="lg:w-1/2">
                                <a href="post.html?id=${post.id}"><img class="h-64 lg:h-full w-full object-cover" src="${post.photoUrl || 'https://placehold.co/800x600/002347/FFFFFF?text=Campus+View'}" alt="${post.title}"></a>
                            </div>
                            <div class="p-8 lg:p-12 lg:w-1/2 flex flex-col justify-center">
                                <p class="text-sm text-blue-500 font-semibold">Featured Article</p>
                                <a href="post.html?id=${post.id}"><h2 class="text-3xl font-bold mt-2 mb-4 hover:text-blue-600">${post.title}</h2></a>
                                <p class="text-gray-600 mb-6">${post.description || ''}</p>
                                <div class="flex items-center"><p class="font-semibold">${post.authorName}</p></div>
                            </div>
                        </div>`;
                }
            }
        };
        const displayApprovedPosts = async () => {
            const result = await getApprovedPosts();
            recentPostsGrid.innerHTML = '';
            if (result.success && result.posts.length > 0) {
                result.posts.forEach(post => {
                    if (post.isFeatured) return;
                    const postCard = document.createElement('div');
                    postCard.className = 'bg-white rounded-xl shadow-lg overflow-hidden transform hover:-translate-y-2 transition-transform duration-300';
                    const postDate = post.createdAt ? post.createdAt.toDate().toLocaleDateString() : 'N/A';
                    postCard.innerHTML = `
                        <a href="post.html?id=${post.id}"><img class="h-48 w-full object-cover" src="${post.photoUrl || 'https://placehold.co/600x400/E2E8F0/4A5568?text=GIKI+Blog'}" alt="${post.title}"></a>
                        <div class="p-6">
                            <p class="text-sm text-gray-500 mb-2">${postDate}</p>
                            <h4 class="text-xl font-semibold mb-3">${post.title}</h4>
                            <p class="text-gray-600 text-sm mb-4">${post.description || ''}</p>
                            <a href="post.html?id=${post.id}" class="font-semibold text-blue-600 hover:underline">Read More &rarr;</a>
                        </div>`;
                    recentPostsGrid.appendChild(postCard);
                });
            } else if (result.success) {
                recentPostsGrid.innerHTML = '<p class="text-gray-500">No posts have been approved yet.</p>';
            }
        };
        displayFeaturedPost();
        displayApprovedPosts();
    }

    // --- Single Post Page Logic ---
    if (document.getElementById('post-content')) {
        const displaySinglePost = async () => {
            const urlParams = new URLSearchParams(window.location.search);
            const postId = urlParams.get('id');
            if (!postId) {
                document.getElementById('post-title').textContent = 'Post not found!';
                return;
            }
            
            // Show loading state
            const postContent = document.getElementById('post-content');
            if (postContent) {
                postContent.innerHTML = '<div class="flex justify-center items-center py-8"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div></div>';
            }
            
            const result = await getPostById(postId);
            if (result.success) {
                const post = result.post;
                document.title = `${post.title} - GIKI Chronicles`;
                document.getElementById('post-title').textContent = post.title;
                const postDate = post.createdAt ? post.createdAt.toDate().toLocaleDateString() : 'N/A';
                document.getElementById('post-meta').textContent = `Posted by ${post.authorName} on ${postDate}`;
                if (post.photoUrl) {
                    document.getElementById('post-image').src = post.photoUrl;
                } else {
                    document.getElementById('post-image').style.display = 'none';
                }
                document.getElementById('post-content').innerHTML = post.content;
                
                // Apply theme-aware styles to the loaded content
                applyThemeToPostContent();
                
                // Load comments and reactions much later (after user has seen the post content)
                setTimeout(() => {
                    if (typeof initializeCommentsAndReactions === 'function') {
                        initializeCommentsAndReactions(postId);
                    } else {
                        console.warn('initializeCommentsAndReactions function not found');
                    }
                }, 2000); // 2 second delay - user can read the post content first
            } else {
                document.getElementById('post-title').textContent = 'Error';
            }
        };
        
        // Function to apply theme-aware styles to post content
        const applyThemeToPostContent = () => {
            const postContent = document.getElementById('post-content');
            if (!postContent) return;
            
            const currentTheme = localStorage.getItem('selected-theme') || 'basic-dark';
            const isDarkTheme = currentTheme === 'basic-dark';
            
            // Apply theme-aware styles to all text elements in the post content
            const textElements = postContent.querySelectorAll('h1, h2, h3, h4, h5, h6, p, li, span, div, blockquote, code, pre, strong, em, a, ul, ol');
            
            textElements.forEach(element => {
                // Skip elements that already have explicit theme styles
                if (element.style.color && element.style.color.includes('var(--')) {
                    return;
                }
                
                if (isDarkTheme) {
                    // Apply dark theme styles - use CSS classes instead of inline styles
                    element.classList.add('theme-basic-dark');
                    element.classList.remove('theme-basic-light');
                    
                    // Special handling for links
                    if (element.tagName === 'A') {
                        element.style.color = '#60a5fa'; // Blue for links in dark theme
                    }
                    
                    // Special handling for code blocks
                    if (element.tagName === 'CODE') {
                        element.style.backgroundColor = '#1f2937';
                        element.style.color = '#f9fafb';
                    }
                    
                    // Special handling for pre blocks
                    if (element.tagName === 'PRE') {
                        element.style.backgroundColor = '#1f2937';
                        element.style.color = '#f9fafb';
                    }
                    
                    // Special handling for blockquotes
                    if (element.tagName === 'BLOCKQUOTE') {
                        element.style.color = '#9ca3af';
                        element.style.borderLeftColor = '#4b5563';
                    }
                } else {
                    // Apply light theme styles - use CSS classes instead of inline styles
                    element.classList.add('theme-basic-light');
                    element.classList.remove('theme-basic-dark');
                    
                    // Special handling for links
                    if (element.tagName === 'A') {
                        element.style.color = '#2563eb'; // Blue for links in light theme
                    }
                    
                    // Special handling for code blocks
                    if (element.tagName === 'CODE') {
                        element.style.backgroundColor = '#f8f9fa';
                        element.style.color = '#1f2937';
                    }
                    
                    // Special handling for pre blocks
                    if (element.tagName === 'PRE') {
                        element.style.backgroundColor = '#f8f9fa';
                        element.style.color = '#1f2937';
                    }
                    
                    // Special handling for blockquotes
                    if (element.tagName === 'BLOCKQUOTE') {
                        element.style.color = '#6b7280';
                        element.style.borderLeftColor = '#e5e7eb';
                    }
                }
            });
        };
        
        // Make the function globally accessible for theme changes
        window.applyThemeToPostContent = applyThemeToPostContent;
        
        // Listen for theme changes
        const themeSelect = document.getElementById('theme-select');
        if (themeSelect) {
            themeSelect.addEventListener('change', () => {
                // Wait a bit for the theme to be applied, then update post content
                setTimeout(() => {
                    applyThemeToPostContent();
                }, 100);
            });
        }
        
        // Set up mutation observer to handle dynamically added content
        const postContent = document.getElementById('post-content');
        if (postContent) {
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                        // New content was added, apply theme styles
                        setTimeout(() => {
                            applyThemeToPostContent();
                        }, 50);
                    }
                });
            });
            
            observer.observe(postContent, {
                childList: true,
                subtree: true
            });
        }
        
        // Also apply theme styles when the page loads (in case content is already there)
        setTimeout(() => {
            applyThemeToPostContent();
        }, 200);
        
        displaySinglePost();
    }

    // --- Contact Form Logic ---
    const contactForm = document.getElementById('contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formMessage = document.getElementById('form-message');
            formMessage.textContent = 'Sending...';
            const submissionData = {
                name: contactForm.name.value,
                email: contactForm.email.value,
                subject: contactForm.subject.value,
                message: contactForm.message.value
            };
            const result = await saveContactSubmission(submissionData);
            if (result.success) {
                formMessage.textContent = 'Message sent successfully!';
                formMessage.classList.add('text-green-500');
                contactForm.reset();
            } else {
                formMessage.textContent = result.error;
                formMessage.classList.add('text-red-500');
            }
        });
    }

    // Listen for custom auth state changed events (for cross-tab synchronization)
    window.addEventListener('authStateChanged', async (event) => {
        const { user, initialized } = event.detail;
        
        if (initialized && user) {
            // Ensure user data is properly loaded when auth state is initialized
            if (typeof window.ensureUserDataLoaded === 'function') {
                try {
                    await window.ensureUserDataLoaded();
                } catch (error) {
                    console.error("App.js: Error ensuring user data loaded from custom event:", error);
                }
            }
        }
    });

    // --- Dynamic Navigation Bar & Logout Logic ---
    onAuthStateChange(async user => {
        const userNav = document.getElementById('user-nav');
        const guestNav = document.getElementById('guest-nav');
        const mobileUserNav = document.getElementById('mobile-user-nav');
        const mobileGuestNav = document.getElementById('mobile-guest-nav');
        const adminAccessBtn = document.getElementById('admin-access-btn');
        const mobileAdminAccessBtn = document.getElementById('mobile-admin-access-btn');
        
        if (user) {
            // Load profile data (only executes on profile page)
            try {
                await loadProfileData(user);
            } catch (error) {
                console.error("App.js: Error loading profile data:", error);
            }
            
            // Ensure user data is properly loaded
            if (typeof window.ensureUserDataLoaded === 'function') {
                try {
                    const dataLoaded = await window.ensureUserDataLoaded();
                } catch (error) {
                    console.error("App.js: Error ensuring user data loaded:", error);
                }
            }
            
            if (userNav) userNav.style.display = 'flex';
            if (guestNav) guestNav.style.display = 'none';
            if (mobileUserNav) mobileUserNav.style.display = 'block';
            if (mobileGuestNav) mobileGuestNav.style.display = 'none';
            
            // Show user navigation in sidebar
            const sidebarUserNav = document.getElementById('sidebar-user-nav');
            const sidebarGuestNav = document.getElementById('sidebar-guest-nav');
            if (sidebarUserNav) sidebarUserNav.style.display = 'block';
            if (sidebarGuestNav) sidebarGuestNav.style.display = 'none';
            
            // Check if user is admin and show admin access button
            if (typeof checkUserAdminStatus === 'function') {
                try {
                    const isAdmin = await checkUserAdminStatus();
                    if (isAdmin && adminAccessBtn) {
                        adminAccessBtn.style.display = 'inline-block';
                    }
                    if (isAdmin && mobileAdminAccessBtn) {
                        mobileAdminAccessBtn.style.display = 'block';
                    }
                    // Show sidebar admin button
                    const sidebarAdminBtn = document.getElementById('sidebar-admin-access-btn');
                    if (isAdmin && sidebarAdminBtn) {
                        sidebarAdminBtn.style.display = 'flex';
                    }
                } catch (error) {
                    console.error("App.js: Error checking admin status:", error);
                }
            }
        } else {
            if (userNav) userNav.style.display = 'none';
            if (guestNav) guestNav.style.display = 'flex';
            if (mobileUserNav) mobileUserNav.style.display = 'none';
            if (mobileGuestNav) mobileGuestNav.style.display = 'block';
            if (adminAccessBtn) adminAccessBtn.style.display = 'none';
            if (mobileAdminAccessBtn) mobileAdminAccessBtn.style.display = 'none';
            
            // Show guest navigation in sidebar
            const sidebarUserNav = document.getElementById('sidebar-user-nav');
            const sidebarGuestNav = document.getElementById('sidebar-guest-nav');
            if (sidebarUserNav) sidebarUserNav.style.display = 'none';
            if (sidebarGuestNav) sidebarGuestNav.style.display = 'block';
            
            // Hide sidebar admin button
            const sidebarAdminBtn = document.getElementById('sidebar-admin-access-btn');
            if (sidebarAdminBtn) sidebarAdminBtn.style.display = 'none';
        }
    });

    // Admin access button click handlers
    const adminAccessBtn = document.getElementById('admin-access-btn');
    if (adminAccessBtn) {
        adminAccessBtn.addEventListener('click', () => {
            window.location.href = 'admin-access.html';
        });
    }
    
    const mobileAdminAccessBtn = document.getElementById('mobile-admin-access-btn');
    if (mobileAdminAccessBtn) {
        mobileAdminAccessBtn.addEventListener('click', () => {
            window.location.href = 'admin-access.html';
        });
    }

    const sidebarAdminAccessBtn = document.getElementById('sidebar-admin-access-btn');
    if (sidebarAdminAccessBtn) {
        sidebarAdminAccessBtn.addEventListener('click', () => {
            window.location.href = 'admin-access.html';
        });
    }

    const logoutButton = document.getElementById('logout-button');
    if (logoutButton) {
        logoutButton.addEventListener('click', async () => {
            await logoutUser();
            window.location.href = 'index.html';
        });
    }
    const mobileLogoutButton = document.getElementById('mobile-logout-button');
    if (mobileLogoutButton) {
        mobileLogoutButton.addEventListener('click', async () => {
            await logoutUser();
            window.location.href = 'index.html';
        });
    }

    const sidebarLogoutButton = document.getElementById('sidebar-logout-button');
    if (sidebarLogoutButton) {
        sidebarLogoutButton.addEventListener('click', async () => {
            await logoutUser();
            window.location.href = 'index.html';
        });
    }
    // --- Gallery Page Logic ---
    const galleryGrid = document.getElementById('gallery-grid');
    if (galleryGrid) {
        const highlightedPhotoSection = document.getElementById('highlighted-photo');
        const categoryFilter = document.getElementById('category-filter');
        const openModalBtn = document.getElementById('open-submission-modal');
        const closeModalBtn = document.getElementById('close-modal');
        const submissionModal = document.getElementById('submission-modal');
        const submissionForm = document.getElementById('submission-form');
        const formMessage = document.getElementById('form-message');

        let allPhotos = [];

        const renderGallery = (photos) => {
            galleryGrid.innerHTML = '';
            if (photos.length === 0) {
                galleryGrid.innerHTML = `<p class="text-gray-500">No photos found for this category.</p>`;
                return;
            }
            photos.forEach(photo => {
                const photoCard = document.createElement('div');
                photoCard.className = 'bg-white rounded-xl shadow-lg overflow-hidden cursor-pointer transform hover:scale-105 transition-transform duration-200';
                photoCard.innerHTML = `
                     <div class="relative bg-gray-100 flex items-center justify-center" style="height: 280px;">
                         <img src="${photo.imageUrl}" alt="${photo.caption}" class="max-w-full max-h-full object-contain" loading="lazy" data-fullsize="${photo.fullSizeUrl || photo.imageUrl}">
                     </div>
                     <div class="p-4">
                         <p class="font-semibold mb-2">${photo.caption}</p>
                         <p class="text-sm text-gray-500">${photo.category}</p>
                         <p class="text-xs text-gray-400">By ${photo.uploaderName}</p>
                     </div>
                 `;

                // Add click event for fullscreen view
                photoCard.addEventListener('click', () => {
                    openFullscreenView(photo);
                });

                galleryGrid.appendChild(photoCard);
            });
        };

        let currentSlideIndex = 0;
        let slideshowInterval;

        const loadPhotos = async () => {
            const result = await getGalleryPhotos();
            if (result.success) {
                allPhotos = result.photos;
                renderGallery(allPhotos);
                loadHighlightedSlideshow();
            }
        };

        const loadHighlightedSlideshow = async () => {
            const result = await getHighlightedPhotos();
            if (result.success && result.photos.length > 0) {
                const highlightedPhotos = result.photos;

                // Clear existing interval
                if (slideshowInterval) {
                    clearInterval(slideshowInterval);
                }

                // Function to show current slide
                const showSlide = (index) => {
                    const photo = highlightedPhotos[index];
                    highlightedPhotoSection.innerHTML = `
                        <div class="relative">
                            <div class="cursor-pointer transform hover:scale-105 transition-transform duration-200" onclick="openFullscreenView(${JSON.stringify(photo)})">
                                <div class="bg-gray-100 flex items-center justify-center rounded-xl" style="height: 400px;">
                                    <img src="${photo.imageUrl}" alt="${photo.caption}" class="max-w-full max-h-full object-contain rounded-xl">
                                </div>
                                ${highlightedPhotos.length > 1 ? `
                                    <div class="absolute top-4 right-4 flex space-x-2">
                                        ${highlightedPhotos.map((_, i) => `
                                            <div class="w-3 h-3 rounded-full ${i === index ? 'bg-white' : 'bg-white bg-opacity-50'}"></div>
                                        `).join('')}
                                    </div>
                                ` : ''}
                            </div>
                            <div class="mt-4 text-center">
                                <h3 class="text-2xl font-bold text-gray-800 mb-2">${photo.caption}</h3>
                                <p class="text-lg text-gray-600">${photo.category}</p>
                                <p class="text-sm text-gray-500 mt-1">By ${photo.uploaderName}</p>
                            </div>
                        </div>
                    `;
                };

                // Show first slide
                showSlide(0);

                // Auto-advance slideshow every 5 seconds if multiple photos
                if (highlightedPhotos.length > 1) {
                    slideshowInterval = setInterval(() => {
                        currentSlideIndex = (currentSlideIndex + 1) % highlightedPhotos.length;
                        showSlide(currentSlideIndex);
                    }, 5000);
                }
            } else {
                // Show first photo as fallback if no highlighted photos
                if (allPhotos.length > 0) {
                    highlightedPhotoSection.innerHTML = `
                        <div class="relative">
                            <div class="cursor-pointer transform hover:scale-105 transition-transform duration-200" onclick="openFullscreenView(${JSON.stringify(allPhotos[0])})">
                                <div class="bg-gray-100 flex items-center justify-center rounded-xl" style="height: 400px;">
                                    <img src="${allPhotos[0].imageUrl}" alt="${allPhotos[0].caption}" class="max-w-full max-h-full object-contain rounded-xl">
                                </div>
                            </div>
                            <div class="mt-4 text-center">
                                <h3 class="text-2xl font-bold text-gray-800 mb-2">${allPhotos[0].caption}</h3>
                                <p class="text-lg text-gray-600">${allPhotos[0].category}</p>
                                <p class="text-sm text-gray-500 mt-1">By ${allPhotos[0].uploaderName}</p>
                            </div>
                        </div>
                    `;
                }
            }
        };

        categoryFilter.addEventListener('change', () => {
            const category = categoryFilter.value;
            if (category === 'all') {
                renderGallery(allPhotos);
            } else {
                const filteredPhotos = allPhotos.filter(p => p.category === category);
                renderGallery(filteredPhotos);
            }
        });

        openModalBtn.addEventListener('click', () => submissionModal.classList.remove('hidden'));
        closeModalBtn.addEventListener('click', () => submissionModal.classList.add('hidden'));

        submissionForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const submitButton = submissionForm.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.textContent;

            // Disable form and show loading state
            submitButton.disabled = true;
            submitButton.textContent = 'Uploading...';
            formMessage.textContent = 'Uploading...';

            const caption = document.getElementById('caption').value;
            const category = document.getElementById('photo-category').value;
            const file = document.getElementById('photo-upload').files[0];

            if (!file) {
                formMessage.textContent = 'Please select a photo.';
                submitButton.disabled = false;
                submitButton.textContent = originalButtonText;
                return;
            }

            if (!category) {
                formMessage.textContent = 'Please select a category.';
                submitButton.disabled = false;
                submitButton.textContent = originalButtonText;
                return;
            }

            // Check file size (10MB limit)
            const maxSize = 10 * 1024 * 1024; // 10MB in bytes
            if (file.size > maxSize) {
                formMessage.textContent = 'File is too large. Please select an image under 10MB.';
                submitButton.disabled = false;
                submitButton.textContent = originalButtonText;
                return;
            }

            try {
                const result = await submitPhotoForReview(caption, category, file);
                if (result.success) {
                    formMessage.textContent = 'Photo added to gallery!';
                    submitButton.textContent = 'Success!';
                    setTimeout(() => {
                        submissionModal.classList.add('hidden');
                        formMessage.textContent = '';
                        submissionForm.reset();
                        submitButton.disabled = false;
                        submitButton.textContent = originalButtonText;
                        loadPhotos(); // Refresh the gallery to show the new photo
                    }, 2000);
                } else {
                    formMessage.textContent = result.error;
                    submitButton.disabled = false;
                    submitButton.textContent = originalButtonText;
                }
            } catch (error) {
                console.error('Upload error:', error);
                formMessage.textContent = 'Upload failed. Please try again.';
                submitButton.disabled = false;
                submitButton.textContent = originalButtonText;
            }
        });

        loadPhotos();
    }

    // Fullscreen view function
    window.openFullscreenView = function (photo) {
        const fullscreenModal = document.createElement('div');
        fullscreenModal.className = 'fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50 p-4 cursor-pointer';
        fullscreenModal.innerHTML = `
            <div class="relative w-full h-full flex items-center justify-center pointer-events-none">
                <button onclick="this.parentElement.parentElement.remove()" class="absolute top-4 right-4 text-white bg-black bg-opacity-60 hover:bg-opacity-80 rounded-full w-12 h-12 flex items-center justify-center transition-all duration-200 transform hover:scale-110 shadow-lg backdrop-blur-sm z-10 pointer-events-auto">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
                <img src="${photo.fullSizeUrl || photo.imageUrl}" alt="${photo.caption}" class="max-w-full max-h-full object-contain pointer-events-auto" style="max-height: calc(100vh - 2rem);">
            </div>
        `;

        // Close on background click
        fullscreenModal.addEventListener('click', (e) => {
            if (e.target === fullscreenModal) {
                fullscreenModal.remove();
            }
        });

        // Close on escape key
        document.addEventListener('keydown', function closeOnEscape(e) {
            if (e.key === 'Escape') {
                fullscreenModal.remove();
                document.removeEventListener('keydown', closeOnEscape);
            }
        });

        document.body.appendChild(fullscreenModal);
    };

    // Toggle highlight function
    window.toggleHighlight = async function (photoId, isHighlighted) {
        const result = await togglePhotoHighlight(photoId, isHighlighted);
        if (result.success) {
            // Reload photos to update the UI
            loadPhotos();
        } else {
            alert('Failed to update photo status. Please try again.');
        }
    };
    // --- Admin Page Logic ---
    const adminContent = document.getElementById('admin-content');
    if (adminContent) {
        const loadingMessage = document.getElementById('loading-message');
        const postsContainer = document.getElementById('posts-container');
        const refreshPostsBtn = document.getElementById('refresh-posts-btn');
        
        // Tab management
        let currentTab = 'all';
        const tabButtons = {
            'all': document.getElementById('tab-all'),
            'pending': document.getElementById('tab-pending'),
            'approved': document.getElementById('tab-approved'),
            'rejected': document.getElementById('tab-rejected')
        };

        // Initialize tab functionality
        Object.keys(tabButtons).forEach(tab => {
            if (tabButtons[tab]) {
                tabButtons[tab].addEventListener('click', () => {
                    currentTab = tab;
                    updateTabStyles();
                    displayPosts();
                });
            }
        });

        function updateTabStyles() {
            Object.keys(tabButtons).forEach(tab => {
                if (tabButtons[tab]) {
                    if (tab === currentTab) {
                        tabButtons[tab].className = 'tab-btn px-4 py-2 rounded-md font-medium transition-colors bg-blue-500 text-white';
                    } else {
                        tabButtons[tab].className = 'tab-btn px-4 py-2 rounded-md font-medium transition-colors text-gray-700 hover:bg-white';
                    }
                }
            });
        }

        // Refresh button functionality
        if (refreshPostsBtn) {
            refreshPostsBtn.addEventListener('click', () => {
                displayPosts();
            });
        }

        const displayPosts = async () => {
            const result = await getAllPosts(currentTab);
            if (postsContainer) {
                postsContainer.innerHTML = ''; // Clear loader

                if (result.success && result.posts.length > 0) {
                    result.posts.forEach(post => {
                        const postElement = createPostElement(post);
                        postsContainer.appendChild(postElement);
                    });
                } else {
                    const statusText = currentTab === 'all' ? 'posts' : currentTab + ' posts';
                    postsContainer.innerHTML = `<p class="text-gray-500">No ${statusText} found.</p>`;
                }
            }
        };

        function createPostElement(post) {
            const postElement = document.createElement('div');
            postElement.className = 'flex justify-between items-center p-4 border rounded-lg bg-white hover:bg-gray-50 transition-colors';
            
            const postDate = post.createdAt ? post.createdAt.toDate().toLocaleDateString() : 'N/A';
            let statusColor = 'bg-yellow-200 text-yellow-800';
            if (post.status === 'approved') {
                statusColor = 'bg-green-200 text-green-800';
            } else if (post.status === 'rejected') {
                statusColor = 'bg-red-200 text-red-800';
            }

            postElement.innerHTML = `
                <div class="flex-1">
                    <div class="flex items-center space-x-3">
                        <h3 class="font-bold text-lg">${post.title}</h3>
                        <span class="px-2 py-1 rounded-full text-xs font-semibold ${statusColor}">${post.status}</span>
                    </div>
                    <p class="text-sm text-gray-500 mt-1">By: ${post.authorName} • ${postDate}</p>
                    <p class="text-sm text-gray-600 mt-1">${post.description || 'No description'}</p>
                </div>
                <div class="flex space-x-2">
                    <button data-id="${post.id}" class="view-btn bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-semibold hover:bg-blue-600">View</button>
                    ${post.status === 'pending' ? `
                        <button data-id="${post.id}" class="approve-btn bg-green-500 text-white px-3 py-1 rounded-full text-sm font-semibold hover:bg-green-600">Approve</button>
                        <button data-id="${post.id}" class="reject-btn bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold hover:bg-red-600">Reject</button>
                    ` : ''}
                    <button data-id="${post.id}" class="delete-btn bg-red-600 text-white px-3 py-1 rounded-full text-sm font-semibold hover:bg-red-700">Delete</button>
                </div>
            `;

            // Add event listeners
            const viewBtn = postElement.querySelector('.view-btn');
            if (viewBtn) {
                viewBtn.addEventListener('click', () => viewPost(post));
            }

            const approveBtn = postElement.querySelector('.approve-btn');
            if (approveBtn) {
                approveBtn.addEventListener('click', async (e) => {
                    const postId = e.target.dataset.id;
                    await updatePostStatus(postId, 'approved');
                    displayPosts(); // Refresh the list
                });
            }

            const rejectBtn = postElement.querySelector('.reject-btn');
            if (rejectBtn) {
                rejectBtn.addEventListener('click', async (e) => {
                    const postId = e.target.dataset.id;
                    await updatePostStatus(postId, 'rejected');
                    displayPosts(); // Refresh the list
                });
            }

            const deleteBtn = postElement.querySelector('.delete-btn');
            if (deleteBtn) {
                deleteBtn.addEventListener('click', (e) => {
                    const postId = e.target.dataset.id;
                    showDeleteConfirmation(postId, post.title);
                });
            }

            return postElement;
        }

        function viewPost(post) {
            const modal = document.getElementById('post-content-modal');
            const modalContent = document.getElementById('modal-post-content');
            const modalApproveBtn = document.getElementById('modal-approve-btn');
            const modalRejectBtn = document.getElementById('modal-reject-btn');

            if (modal && modalContent) {
                modalContent.innerHTML = `
                    <h1 class="text-3xl font-bold mb-4">${post.title}</h1>
                    <div class="text-sm text-gray-500 mb-4">
                        By ${post.authorName} • ${post.createdAt ? post.createdAt.toDate().toLocaleDateString() : 'N/A'}
                    </div>
                    <div class="prose max-w-none">
                        ${post.content}
                    </div>
                `;

                // Update modal buttons based on post status
                if (modalApproveBtn && modalRejectBtn) {
                    if (post.status === 'pending') {
                        modalApproveBtn.style.display = 'inline-block';
                        modalRejectBtn.style.display = 'inline-block';
                        modalApproveBtn.onclick = () => {
                            updatePostStatus(post.id, 'approved');
                            modal.classList.add('hidden');
                            displayPosts();
                        };
                        modalRejectBtn.onclick = () => {
                            updatePostStatus(post.id, 'rejected');
                            modal.classList.add('hidden');
                            displayPosts();
                        };
                    } else {
                        modalApproveBtn.style.display = 'none';
                        modalRejectBtn.style.display = 'none';
                    }
                }

                modal.classList.remove('hidden');
            }
        }

        function showDeleteConfirmation(postId, postTitle) {
            const modal = document.getElementById('delete-confirmation-modal');
            const postIdSpan = document.getElementById('delete-post-id');
            const confirmBtn = document.getElementById('confirm-delete-btn');
            const cancelBtn = document.getElementById('cancel-delete-btn');

            if (modal && postIdSpan && confirmBtn && cancelBtn) {
                postIdSpan.textContent = postId;
                
                confirmBtn.onclick = async () => {
                    const result = await deletePostPermanently(postId);
                    if (result.success) {
                        modal.classList.add('hidden');
                        displayPosts(); // Refresh the list
                    } else {
                        alert('Error deleting post: ' + result.error);
                    }
                };

                cancelBtn.onclick = () => {
                    modal.classList.add('hidden');
                };

                modal.classList.remove('hidden');
            }
        }

        // Close modal functions
        window.closePostModal = function() {
            const modal = document.getElementById('post-content-modal');
            if (modal) {
                modal.classList.add('hidden');
            }
        };

        // Close delete modal when clicking outside
        const deleteModal = document.getElementById('delete-confirmation-modal');
        if (deleteModal) {
            deleteModal.addEventListener('click', (e) => {
                if (e.target === deleteModal) {
                    deleteModal.classList.add('hidden');
                }
            });
        }

        // Close post modal when clicking outside
        const postModal = document.getElementById('post-content-modal');
        if (postModal) {
            postModal.addEventListener('click', (e) => {
                if (e.target === postModal) {
                    postModal.classList.add('hidden');
                }
            });
        }

        const checkAdminAndLoad = async () => {
            // Check for secure access first
            const hasSecureAccess = checkSecureAdminAccess();
            if (hasSecureAccess) {
                loadingMessage.style.display = 'none';
                adminContent.style.display = 'block';
                displayPosts();
                displayPendingEvents();
                displayPendingGalleryPhotos();
                return;
            }
            
            // TEMPORARY: Force admin access for testing
            const forceAdmin = false; // Set this to false to restore normal admin checking
            
            if (forceAdmin) {
                loadingMessage.style.display = 'none';
                adminContent.style.display = 'block';
                displayPosts();
                displayPendingEvents();
                displayPendingGalleryPhotos();
                return;
            }
            
            // Try the simple test first
            const testResult = await testAdminStatus();
            const isAdmin = typeof checkUserAdminStatus === 'function' ? await checkUserAdminStatus() : false;
            if (isAdmin) {
                loadingMessage.style.display = 'none';
                adminContent.style.display = 'block';
                displayPosts();
                displayPendingEvents();
                displayPendingGalleryPhotos();
            } else {
                loadingMessage.innerHTML = '<p class="text-lg text-red-500">Access Denied. You must be an administrator to view this page.</p>';
            }
        };

        onAuthStateChange(user => {
            if (user) {
                checkAdminAndLoad();
            } else {
                // If no user is logged in, redirect to the login page
                window.location.href = 'login.html';
            }
        });
    }
    const displayApprovedPostsAdmin = async () => {
        const result = await getApprovedPosts();
        approvedPostsContainer.innerHTML = ''; // Clear loader

        if (result.success && result.posts.length > 0) {
            result.posts.forEach(post => {
                const postElement = document.createElement('div');
                postElement.className = 'flex justify-between items-center p-4 border rounded-lg bg-white';

                const featureButtonText = post.isFeatured ? 'Unfeature' : 'Feature';
                const featureButtonClass = post.isFeatured ? 'bg-yellow-500 hover:bg-yellow-600' : 'bg-blue-500 hover:bg-blue-600';

                postElement.innerHTML = `
                        <div>
                            <p class="font-bold text-lg">${post.title}</p>
                            <p class="text-sm text-gray-500">By: ${post.authorName}</p>
                        </div>
                        <div class="flex space-x-2">
                            <button data-id="${post.id}" data-featured="${post.isFeatured}" class="feature-btn ${featureButtonClass} text-white px-3 py-1 rounded-full text-sm font-semibold">${featureButtonText}</button>
                        </div>
                    `;
                approvedPostsContainer.appendChild(postElement);
            });
        } else {
            approvedPostsContainer.innerHTML = '<p class="text-gray-500">There are no approved posts to feature.</p>';
        }

        // Add event listeners to the new feature buttons
        document.querySelectorAll('.feature-btn').forEach(button => {
            button.addEventListener('click', async (e) => {
                const postId = e.target.dataset.id;
                const isCurrentlyFeatured = e.target.dataset.featured === 'true';
                await toggleFeaturedStatus(postId, !isCurrentlyFeatured);
                displayApprovedPostsAdmin(); // Refresh the list
            });
        });
    };

    // Display pending events for admin review
    const displayPendingEvents = async () => {
        const pendingEventsContainer = document.getElementById('pending-events-container');
        if (!pendingEventsContainer) {
            console.error('Pending events container not found');
            return;
        }

        try {
            const result = await getPendingEvents();
            
            if (result.success && result.events && result.events.length > 0) {
                pendingEventsContainer.innerHTML = '';
                
                result.events.forEach(event => {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'bg-white border rounded-lg p-4 shadow-sm';
                    
                    const eventDate = event.date ? new Date(event.date).toLocaleDateString() : 'No date';
                    const eventTime = event.time || 'No time';
                    
                    eventElement.innerHTML = `
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <h3 class="font-bold text-lg text-gray-800">${event.name}</h3>
                                <p class="text-sm text-gray-600 mt-1">${event.description}</p>
                                <div class="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                                    <span>📅 ${eventDate}</span>
                                    <span>🕒 ${eventTime}</span>
                                    <span>📍 ${event.location || 'No location'}</span>
                                </div>
                                <p class="text-xs text-gray-400 mt-2">Submitted by: ${event.submittedBy || 'Unknown'}</p>
                            </div>
                            <div class="flex space-x-2 ml-4">
                                <button onclick="approveEvent('${event.id}')" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm font-medium transition-colors">
                                    Approve
                                </button>
                                <button onclick="rejectEvent('${event.id}')" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm font-medium transition-colors">
                                    Reject
                                </button>
                            </div>
                        </div>
                    `;
                    
                    pendingEventsContainer.appendChild(eventElement);
                });
            } else {
                pendingEventsContainer.innerHTML = '<p class="text-gray-500">No pending events to review.</p>';
            }
        } catch (error) {
            console.error('Error loading pending events:', error);
            pendingEventsContainer.innerHTML = '<p class="text-red-500">Error loading pending events.</p>';
        }
    };

    // Display pending gallery photos for admin review
    const displayPendingGalleryPhotos = async () => {
        const pendingGalleryContainer = document.getElementById('pending-gallery-container');
        if (!pendingGalleryContainer) {
            return;
        }

        try {
            const result = await getPendingGalleryPhotos();
            
            if (result.success && result.photos && result.photos.length > 0) {
                pendingGalleryContainer.innerHTML = '';
                
                result.photos.forEach(photo => {
                    const photoElement = document.createElement('div');
                    photoElement.className = 'bg-white border rounded-lg p-4 shadow-sm';
                    
                    photoElement.innerHTML = `
                        <div class="flex items-start space-x-4">
                            <div class="flex-shrink-0">
                                <img src="${photo.imageUrl}" alt="${photo.caption}" class="w-24 h-24 object-cover rounded-lg">
                            </div>
                            <div class="flex-1">
                                <h3 class="font-bold text-lg text-gray-800">${photo.caption}</h3>
                                <p class="text-sm text-gray-600 mt-1">Category: ${photo.category}</p>
                                <p class="text-xs text-gray-400 mt-2">Submitted by: ${photo.uploaderName || 'Unknown'}</p>
                                <p class="text-xs text-gray-400">Uploaded: ${photo.createdAt ? new Date(photo.createdAt.toDate ? photo.createdAt.toDate() : photo.createdAt).toLocaleDateString() : 'Unknown'}</p>
                            </div>
                            <div class="flex flex-col space-y-2">
                                <button onclick="approveGalleryPhoto('${photo.id}')" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm font-medium transition-colors">
                                    Approve
                                </button>
                                <button onclick="rejectGalleryPhoto('${photo.id}')" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm font-medium transition-colors">
                                    Reject
                                </button>
                            </div>
                        </div>
                    `;
                    
                    pendingGalleryContainer.appendChild(photoElement);
                });
            } else {
                pendingGalleryContainer.innerHTML = '<p class="text-gray-500">No pending gallery photos to review.</p>';
            }
        } catch (error) {
            console.error('Error loading pending gallery photos:', error);
            pendingGalleryContainer.innerHTML = '<p class="text-red-500">Error loading pending gallery photos.</p>';
        }
    };

    // Event approval functions
    window.approveEvent = async (eventId) => {
        try {
            const result = await updateEventStatus(eventId, 'approved');
            if (result.success) {
                displayPendingEvents(); // Refresh the list
            } else {
                alert('Error approving event: ' + result.error);
            }
        } catch (error) {
            console.error('Error approving event:', error);
            alert('Error approving event');
        }
    };

    window.rejectEvent = async (eventId) => {
        try {
            const result = await updateEventStatus(eventId, 'rejected');
            if (result.success) {
                displayPendingEvents(); // Refresh the list
            } else {
                alert('Error rejecting event: ' + result.error);
            }
        } catch (error) {
            console.error('Error rejecting event:', error);
            alert('Error rejecting event');
        }
    };

    // Gallery photo approval functions
    window.approveGalleryPhoto = async (photoId) => {
        try {
            const result = await updateGalleryPhotoStatus(photoId, 'approved');
            if (result.success) {
                displayPendingGalleryPhotos(); // Refresh the list
            } else {
                alert('Error approving photo: ' + result.error);
            }
        } catch (error) {
            console.error('Error approving photo:', error);
            alert('Error approving photo');
        }
    };

    window.rejectGalleryPhoto = async (photoId) => {
        try {
            const result = await updateGalleryPhotoStatus(photoId, 'rejected');
            if (result.success) {
                displayPendingGalleryPhotos(); // Refresh the list
            } else {
                alert('Error rejecting photo: ' + result.error);
            }
        } catch (error) {
            console.error('Error rejecting photo:', error);
            alert('Error rejecting photo');
        }
    };
});


// theme-manager.js
// Theme Management for GIKI Chronicles
// This file handles theme switching across all pages
// Wrapped in IIFE to avoid global scope conflicts

(function() {
    'use strict';
    
    // Load saved theme from localStorage, default to 'basic-dark' (black theme)
    let savedTheme = localStorage.getItem('selected-theme');
    if (!savedTheme) {
        savedTheme = 'basic-dark';
        localStorage.setItem('selected-theme', savedTheme);
    }

    // Function to apply theme
    function applyTheme(themeName) {
        // Remove all existing theme classes from both html and body
        document.documentElement.classList.remove('theme-basic-light', 'theme-basic-dark');
        document.body.classList.remove('theme-basic-light', 'theme-basic-dark');
        
        // Add the selected theme class to both html and body
        document.documentElement.classList.add(`theme-${themeName}`);
        document.body.classList.add(`theme-${themeName}`);
        
        // Save the theme to localStorage
        localStorage.setItem('selected-theme', themeName);
        
        // Update theme selector if it exists
        const themeSelect = document.getElementById('theme-select');
        if (themeSelect) {
            themeSelect.value = themeName;
        }
    }

    // Function to initialize theme functionality
    function initializeTheme() {
        // Apply the saved theme immediately
        applyTheme(savedTheme);

        // Set up event listener for theme selector
        const themeSelect = document.getElementById('theme-select');
        if (themeSelect) {
            // Set the current value
            themeSelect.value = savedTheme;
            
            // Add event listener for theme selector
            themeSelect.addEventListener('change', function() {
                const selectedTheme = this.value;
                applyTheme(selectedTheme);
            });
        }
    }

    // Initialize theme as soon as possible
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTheme);
    } else {
        // If DOM is already loaded, initialize immediately
        initializeTheme();
    }

    // Also apply theme immediately for faster visual feedback
    applyTheme(savedTheme);

    // Additional fallback to ensure theme is applied
    setTimeout(() => {
        if (!document.body.classList.contains(`theme-${savedTheme}`)) {
            applyTheme(savedTheme);
        }
    }, 100);
})(); 

// security.js
/**
 * security.js
 * Enhanced security measures for the GIKI Chronicles admin system
 */

// Rate limiting for admin actions
const adminActionLimiter = {
    attempts: new Map(),
    maxAttempts: 5,
    windowMs: 15 * 60 * 1000, // 15 minutes
    
    checkLimit(userId, action) {
        const key = `${userId}-${action}`;
        const now = Date.now();
        const userAttempts = this.attempts.get(key) || [];
        
        // Remove old attempts outside the window
        const recentAttempts = userAttempts.filter(time => now - time < this.windowMs);
        
        if (recentAttempts.length >= this.maxAttempts) {
            return false;
        }
        
        recentAttempts.push(now);
        this.attempts.set(key, recentAttempts);
        return true;
    },
    
    reset(userId, action) {
        const key = `${userId}-${action}`;
        this.attempts.delete(key);
    }
};

// Enhanced admin validation with additional security checks
async function validateAdminAccess(action = 'general') {
    const user = auth.currentUser;
    if (!user) {
        console.error("Admin validation failed: No authenticated user");
        return { valid: false, error: "Authentication required" };
    }

    // Rate limiting check
    if (!adminActionLimiter.checkLimit(user.uid, action)) {
        console.error(`Rate limit exceeded for user ${user.uid} on action ${action}`);
        return { valid: false, error: "Too many admin actions. Please wait before trying again." };
    }

    try {
        // Verify admin status
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error(`Unauthorized admin access attempt by user ${user.uid} for action: ${action}`);
            return { valid: false, error: "Admin privileges required" };
        }

        // Additional security: Check if user account is still active
        const userDoc = await db.collection('users').doc(user.uid).get();
        if (!userDoc.exists) {
            console.error(`Admin validation failed: User document not found for ${user.uid}`);
            return { valid: false, error: "User account not found" };
        }

        const userData = userDoc.data();
        if (userData.isSuspended) {
            console.error(`Admin validation failed: Suspended user ${user.uid} attempted admin action`);
            return { valid: false, error: "Account suspended" };
        }

        // Log admin action for audit trail
        await logAdminAction(user.uid, action, 'success');
        
        return { valid: true, user: user, userData: userData };
    } catch (error) {
        console.error("Admin validation error:", error);
        return { valid: false, error: "Validation failed" };
    }
}

// Audit trail for admin actions
async function logAdminAction(userId, action, status, details = {}) {
    try {
        await db.collection('admin_audit_log').add({
            userId: userId,
            action: action,
            status: status,
            details: details,
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            userAgent: navigator.userAgent,
            ipAddress: 'client-side' // In production, this should come from server
        });
    } catch (error) {
        console.error("Failed to log admin action:", error);
    }
}

// Enhanced session validation
function validateSession() {
    const user = auth.currentUser;
    if (!user) return false;
    
    // Check if token is recent (within last hour)
    const tokenTime = user.metadata.lastSignInTime;
    if (tokenTime) {
        const lastSignIn = new Date(tokenTime);
        const now = new Date();
        const hoursSinceSignIn = (now - lastSignIn) / (1000 * 60 * 60);
        
        if (hoursSinceSignIn > 24) { // Require re-authentication after 24 hours
            console.warn("Session expired, requiring re-authentication");
            return false;
        }
    }
    
    return true;
}

// Input sanitization for admin actions
function sanitizeAdminInput(input) {
    if (typeof input !== 'string') return input;
    
    // Remove potentially dangerous characters and scripts
    return input
        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
        .replace(/javascript:/gi, '')
        .replace(/on\w+\s*=/gi, '')
        .trim();
}

// Enhanced error handling for admin functions
function handleAdminError(error, context) {
    console.error(`Admin error in ${context}:`, error);
    
    // Log security-relevant errors
    if (error.code === 'permission-denied' || error.message.includes('permission')) {
        logAdminAction('unknown', context, 'permission_denied', { error: error.message });
    }
    
    return {
        success: false,
        error: "An error occurred. Please try again or contact support.",
        context: context
    };
}

// Export functions for use in other files
window.security = {
    validateAdminAccess,
    logAdminAction,
    validateSession,
    sanitizeAdminInput,
    handleAdminError,
    adminActionLimiter
}; 

// performance-monitor.js
/**
 * Performance Monitor
 * Tracks loading times and user experience metrics
 */

class PerformanceMonitor {
    constructor() {
        this.metrics = {
            pageLoadTime: 0,
            domContentLoaded: 0,
            firstContentfulPaint: 0,
            imagesLoaded: 0,
            totalImages: 0,
            lazyLoadSavings: 0
        };
        
        this.init();
    }
    
    init() {
        // Track page load time
        window.addEventListener('load', () => {
            this.metrics.pageLoadTime = performance.now();
            this.logMetrics();
        });
        
        // Track DOM content loaded
        document.addEventListener('DOMContentLoaded', () => {
            this.metrics.domContentLoaded = performance.now();
        });
        
        // Track First Contentful Paint
        if ('PerformanceObserver' in window) {
            const observer = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (entry.name === 'first-contentful-paint') {
                        this.metrics.firstContentfulPaint = entry.startTime;
                    }
                }
            });
            observer.observe({ entryTypes: ['paint'] });
        }
        
        // Track image loading
        this.trackImageLoading();
        
        // Track lazy loading savings
        this.trackLazyLoading();
    }
    
    trackImageLoading() {
        const images = document.querySelectorAll('img');
        this.metrics.totalImages = images.length;
        
        let loadedImages = 0;
        images.forEach(img => {
            if (img.complete) {
                loadedImages++;
            } else {
                img.addEventListener('load', () => {
                    loadedImages++;
                    this.metrics.imagesLoaded = loadedImages;
                });
            }
        });
    }
    
    trackLazyLoading() {
        const lazyImages = document.querySelectorAll('img[loading="lazy"]');
        this.metrics.lazyLoadSavings = lazyImages.length;
        
        // Calculate potential bandwidth savings
        const estimatedSavings = lazyImages.length * 100; // Assume 100KB per image
    }
    
    logMetrics() {
        // Send metrics to analytics (if available)
        this.sendMetrics();
    }
    
    sendMetrics() {
        // You can send these metrics to your analytics service
        // Example: Google Analytics, Firebase Analytics, etc.
        if (typeof gtag !== 'undefined') {
            gtag('event', 'performance_metrics', {
                page_load_time: this.metrics.pageLoadTime,
                dom_content_loaded: this.metrics.domContentLoaded,
                first_contentful_paint: this.metrics.firstContentfulPaint,
                images_loaded: this.metrics.imagesLoaded,
                total_images: this.metrics.totalImages,
                lazy_load_savings: this.metrics.lazyLoadSavings
            });
        }
    }
    
    // Get current metrics
    getMetrics() {
        return this.metrics;
    }
}

// Initialize performance monitor
const performanceMonitor = new PerformanceMonitor();

// Export for use in other scripts
window.performanceMonitor = performanceMonitor;


// calendar.js
document.addEventListener('DOMContentLoaded', () => {
    // This will be populated from Firebase
    let events = {};
    let currentEvent = null; // To store the event for the Add to Calendar modal

    // --- Notification System ---
    function showNotification(title, message, type = 'success') {
        const notification = document.getElementById('notification');
        const notificationTitle = document.getElementById('notification-title');
        const notificationMessage = document.getElementById('notification-message');
        const notificationContainer = document.getElementById('notification-container');

        if (!notification || !notificationTitle || !notificationMessage || !notificationContainer) {
            console.error("Notification elements not found.");
            return;
        }

        notificationTitle.textContent = title;
        notificationMessage.textContent = message;
        notification.className = `notification ${type}`;
        notification.classList.add('show');

        setTimeout(() => {
            hideNotification();
        }, 4000);
    }

    function hideNotification() {
        const notification = document.getElementById('notification');
        if (notification) {
            notification.classList.remove('show');
        }
    }

    const notificationCloseBtn = document.getElementById('notification-close');
    if (notificationCloseBtn) {
        notificationCloseBtn.addEventListener('click', hideNotification);
    }

    // --- Add to Calendar Modal Functions ---
    const addToCalendarModal = document.getElementById('add-to-calendar-modal');
    const addToCalendarCloseBtn = document.querySelector('.modal-close-add');
    const googleCalendarLink = document.getElementById('google-calendar-link');
    const outlookCalendarLink = document.getElementById('outlook-calendar-link');
    const appleCalendarLink = document.getElementById('apple-calendar-link');

    function showAddToCalendarModal(event) {
        currentEvent = event;
        if (addToCalendarModal) {
            addToCalendarModal.classList.remove('hidden');
        }
    }

    function hideAddToCalendarModal() {
        if (addToCalendarModal) {
            addToCalendarModal.classList.add('hidden');
        }
    }

    if (addToCalendarCloseBtn) {
        addToCalendarCloseBtn.addEventListener('click', hideAddToCalendarModal);
    }

    if (addToCalendarModal) {
        addToCalendarModal.addEventListener('click', (e) => {
            if (e.target === addToCalendarModal) {
                hideAddToCalendarModal();
            }
        });
    }

    function generateCalendarLinks(event) {
        // Google Calendar link
        const googleLink = `https://www.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.name)}&dates=${formatDateForGoogleCalendar(event.date, event.time)}/${formatDateForGoogleCalendar(event.date, event.time, 60)}&details=${encodeURIComponent(event.description)}&location=${encodeURIComponent(event.location)}`;
        googleCalendarLink.href = googleLink;

        // Outlook Calendar link
        const outlookLink = `https://outlook.live.com/calendar/0/deeplink/compose?path=/calendar/action/compose&rru=addevent&subject=${encodeURIComponent(event.name)}&startdt=${formatDateForOutlook(event.date, event.time)}&enddt=${formatDateForOutlook(event.date, event.time, 60)}&body=${encodeURIComponent(event.description)}&location=${encodeURIComponent(event.location)}`;
        outlookCalendarLink.href = outlookLink;

        // Apple Calendar (.ics) link - Store the event data for download
        currentEvent = event; // Store for Apple Calendar download
    }

    if (googleCalendarLink) {
        googleCalendarLink.addEventListener('click', () => {
            if (currentEvent) generateCalendarLinks(currentEvent);
            hideAddToCalendarModal();
        });
    }

    if (outlookCalendarLink) {
        outlookCalendarLink.addEventListener('click', () => {
            if (currentEvent) generateCalendarLinks(currentEvent);
            hideAddToCalendarModal();
        });
    }

    if (appleCalendarLink) {
        appleCalendarLink.addEventListener('click', () => {
            if (currentEvent) {
                downloadAppleCalendarFile(currentEvent);
            }
            hideAddToCalendarModal();
        });
    }

    // --- Backend Firebase Functions ---
    async function saveEvent(eventData) {
        try {
            const newEvent = {
                name: eventData.name,
                date: eventData.date,
                time: eventData.time || null,
                type: eventData.type,
                location: eventData.location,
                description: eventData.description,
                submittedAt: firebase.firestore.FieldValue.serverTimestamp(),
                submittedBy: auth.currentUser ? auth.currentUser.uid : "Guest",
                status: "pending" // All new events start as pending
            };
            await db.collection("events").add(newEvent);
            return { success: true };
        } catch (error) {
            console.error("Error saving event:", error);
            return { success: false, error: "Failed to save event." };
        }
    }

    async function getAllEvents() {
        try {
            const querySnapshot = await db.collection("events")
                .where("status", "==", "approved")
                .get();
            const fetchedEvents = {};

            querySnapshot.forEach((doc) => {
                const event = doc.data();
                const eventId = doc.id;
                const eventDate = event.date;

                if (!fetchedEvents[eventDate]) {
                    fetchedEvents[eventDate] = [];
                }
                fetchedEvents[eventDate].push({
                    id: eventId,
                    name: event.name,
                    date: event.date,
                    time: event.time,
                    type: event.type,
                    location: event.location,
                    description: event.description
                });
            });

            return { success: true, events: fetchedEvents };
        } catch (error) {
            console.error("Error fetching events:", error);
            return { success: false, error: "Failed to fetch events." };
        }
    }

    // --- Date Formatting Functions ---
    function formatUTCDate(dateString) {
        const date = new Date(dateString);
        date.setHours(9, 0, 0, 0);
        return date.toISOString().replace(/-|:|\.\d+/g, "");
    }

    function formatUTCDateWithTime(dateString, timeString, addMinutes = 0) {
        const [year, month, day] = dateString.split('-').map(Number);
        let date;
        
        if (timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            // Create date in local timezone
            date = new Date(year, month - 1, day, hours, minutes + addMinutes, 0, 0);
        } else {
            // If no time specified, default to 9 AM
            date = new Date(year, month - 1, day, 9 + addMinutes, 0, 0, 0);
        }
        
        // Format as required by iCalendar (UTC time)
        const utcDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
        return utcDate.toISOString().replace(/-|:|\.\d+/g, "");
    }

    function downloadAppleCalendarFile(event) {
        try {
            // Validate event data
            if (!event || !event.name || !event.date) {
                throw new Error('Invalid event data');
            }
            
            // Generate proper iCalendar content
            const startDate = formatUTCDateWithTime(event.date, event.time);
            const endDate = formatUTCDateWithTime(event.date, event.time, 60);
            
            // Escape special characters in description and location
            const escapedDescription = (event.description || '').replace(/\n/g, '\\n').replace(/;/g, '\\;').replace(/,/g, '\\,');
            const escapedLocation = (event.location || '').replace(/;/g, '\\;').replace(/,/g, '\\,');
            const escapedName = event.name.replace(/;/g, '\\;').replace(/,/g, '\\,');
            
            // Generate unique UID for the event
            const uid = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}@gikichronicles.com`;
            
            const icsContent = [
                'BEGIN:VCALENDAR',
                'VERSION:2.0',
                'PRODID:-//GIKI Chronicles//Calendar Event//EN',
                'CALSCALE:GREGORIAN',
                'METHOD:PUBLISH',
                'BEGIN:VEVENT',
                `UID:${uid}`,
                `DTSTAMP:${new Date().toISOString().replace(/-|:|\.\d+/g, '')}`,
                `DTSTART:${startDate}`,
                `DTEND:${endDate}`,
                `SUMMARY:${escapedName}`,
                `DESCRIPTION:${escapedDescription}`,
                `LOCATION:${escapedLocation}`,
                'STATUS:CONFIRMED',
                'SEQUENCE:0',
                'END:VEVENT',
                'END:VCALENDAR'
            ].join('\r\n');
            
            // Create blob and download
            const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
            const url = window.URL.createObjectURL(blob);
            
            // Create temporary link and trigger download
            const link = document.createElement('a');
            link.href = url;
            link.download = `${event.name.replace(/[^a-z0-9]/gi, '_')}.ics`;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Clean up
            window.URL.revokeObjectURL(url);
            
            showNotification('Success', 'Calendar file downloaded successfully', 'success');
        } catch (error) {
            console.error('Error downloading Apple Calendar file:', error);
            showNotification('Error', 'Failed to download calendar file. Please try again.', 'error');
        }
    }

    function formatEventDateTime(dateString, timeString = null) {
        const [year, month, day] = dateString.split('-').map(Number);
        const eventDate = new Date(year, month - 1, day);
        const formattedDate = eventDate.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        if (timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            const timeDate = new Date();
            timeDate.setHours(hours, minutes, 0, 0);
            const formattedTime = timeDate.toLocaleTimeString('en-US', {
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
            });
            return `${formattedDate} at ${formattedTime}`;
        }

        return formattedDate;
    }

    function formatDateForGoogleCalendar(dateString, timeString = null, durationMinutes = 0) {
        const [year, month, day] = dateString.split('-').map(Number);
        const baseDate = new Date(year, month - 1, day);

        if (timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            baseDate.setHours(hours, minutes);
            const endDate = new Date(baseDate.getTime() + durationMinutes * 60000);
            return `${baseDate.toISOString().replace(/[-:]/g, '').slice(0, 15)}Z`;
        }

        return `${baseDate.getFullYear()}${String(baseDate.getMonth() + 1).padStart(2, '0')}${String(baseDate.getDate()).padStart(2, '0')}`;
    }

    function formatDateForOutlook(dateString, timeString = null, durationMinutes = 0) {
        const [year, month, day] = dateString.split('-').map(Number);
        const baseDate = new Date(year, month - 1, day);
        if (timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            baseDate.setHours(hours, minutes);
        } else {
            baseDate.setHours(9, 0, 0);
        }
        const endDate = new Date(baseDate.getTime() + durationMinutes * 60000);
        return baseDate.toISOString();
    }

    // --- Frontend UI Logic ---
    const navEvents = document.getElementById('nav-events');
    const navSubmit = document.getElementById('nav-submit');
    const navCalendar = document.getElementById('nav-calendar');
    const calendarView = document.getElementById('calendar-view');
    const submitEventView = document.getElementById('submit-event-view');
    const eventsView = document.getElementById('events-view');
    const mapView = document.getElementById('map-view');
    const monthYearEl = document.getElementById('month-year');
    const calendarGrid = document.getElementById('calendar-grid');
    const leftArrow = document.getElementById('left-arrow');
    const rightArrow = document.getElementById('right-arrow');
    const popup = document.getElementById('event-popup');
    const closeBtn = document.querySelector('.close-btn');
    const eventListContainer = document.getElementById('event-list-container');
    const eventForm = document.getElementById('event-form');
    const upcomingEventsContainer = document.getElementById('upcoming-events');
    const pastEventsContainer = document.getElementById('past-events');
    const signInBtn = document.querySelector('.sign-in-btn');

    let currentDate = new Date();
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    function showPage(pageId) {
        if (calendarView) calendarView.style.display = 'none';
        if (submitEventView) submitEventView.style.display = 'none';
        if (eventsView) eventsView.style.display = 'none';
        if (mapView) mapView.style.display = 'none';

        let viewId;
        switch (pageId) {
            case 'home':
                viewId = 'calendar-view';
                break;
            case 'submit':
                viewId = 'submit-event-view';
                break;
            case 'events':
                viewId = 'events-view';
                break;
            case 'map':
                viewId = 'map-view';
                break;
            default:
                viewId = `${pageId}-view`;
        }

        const viewToShow = document.getElementById(viewId);
        if (viewToShow) {
            viewToShow.style.display = 'block';
        } else {
            console.error(`View ${viewId} not found`);
        }

        // Remove active class from all nav links
        if (navEvents) navEvents.classList.remove('active');
        if (navSubmit) navSubmit.classList.remove('active');
        
        // Add active class to current nav link
        const activeLink = document.getElementById(`nav-${pageId}`);
        if (activeLink) {
            activeLink.classList.add('active');
        }

        if (pageId === 'events') renderEventsPage();
    }

    function renderCalendar() {
        if (!monthYearEl || !calendarGrid) return; // Exit if elements don't exist
        
        const month = currentDate.getMonth();
        const year = currentDate.getFullYear();
        monthYearEl.textContent = `${monthNames[month]} ${year}`;

        const firstDayOfMonth = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const lastMonthDays = new Date(year, month, 0).getDate();
        const prevMonth = new Date(year, month - 1);
        const nextMonth = new Date(year, month + 1);

        calendarGrid.innerHTML = `
            <div class="day-of-week">Su</div>
            <div class="day-of-week">Mo</div>
            <div class="day-of-week">Tu</div>
            <div class="day-of-week">We</div>
            <div class="day-of-week">Th</div>
            <div class="day-of-week">Fr</div>
            <div class="day-of-week">Sa</div>
        `;

        for (let i = firstDayOfMonth - 1; i >= 0; i--) {
            const dayEl = document.createElement('div');
            dayEl.className = 'day other-month';
            dayEl.textContent = lastMonthDays - i;
            dayEl.setAttribute('data-date', `${prevMonth.getFullYear()}-${String(prevMonth.getMonth() + 1).padStart(2, '0')}-${String(lastMonthDays - i).padStart(2, '0')}`);
            calendarGrid.appendChild(dayEl);
        }

        for (let i = 1; i <= daysInMonth; i++) {
            const dayEl = document.createElement('div');
            const dayDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
            dayEl.className = 'day';
            dayEl.textContent = i;
            dayEl.setAttribute('data-date', dayDate);

            if (events[dayDate] && events[dayDate].length > 0) {
                const eventDot = document.createElement('div');
                eventDot.className = 'event-dot';
                dayEl.appendChild(eventDot);
            }

            const today = new Date();
            if (new Date(dayDate).toDateString() === today.toDateString()) {
                dayEl.classList.add('active');
            }

            dayEl.addEventListener('click', () => {
                if (events[dayDate] && events[dayDate].length > 0) {
                    showEventPopup(dayDate);
                }
                document.querySelectorAll('.day').forEach(d => d.classList.remove('selected'));
                dayEl.classList.add('selected');
            });
            calendarGrid.appendChild(dayEl);
        }

        const totalCells = calendarGrid.children.length - 7;
        const remainingCells = 42 - totalCells;
        for (let i = 1; i <= remainingCells; i++) {
            const dayEl = document.createElement('div');
            dayEl.className = 'day other-month';
            dayEl.textContent = i;
            dayEl.setAttribute('data-date', `${nextMonth.getFullYear()}-${String(nextMonth.getMonth() + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`);
            calendarGrid.appendChild(dayEl);
        }
    }

    async function loadEventsAndRender() {
        const result = await getAllEvents();
        if (result.success) {
            events = result.events;
            renderCalendar();
        } else {
            console.error("Failed to load events:", result.error);
        }
    }

    function createEventDetailsCard(event) {
        const eventCard = document.createElement('div');
        eventCard.className = 'event-details-card';
        eventCard.innerHTML = `
            <h3 class="popup-title">${event.name}</h3>
            <p class="popup-date">${formatEventDateTime(event.date, event.time)}</p>
            <div class="popup-tags">
                <span class="event-tag tag-${event.type.toLowerCase()}">${event.type}</span>
            </div>
            <p class="popup-description">${event.description}</p>
            <div class="popup-location-container">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                    class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
                    <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-1a3 3 0 1 1 0-6 3 3 0 0 1 0 6z" />
                </svg>
                <span id="popup-location">${event.location}</span>
            </div>
            <div class="popup-buttons">
                <button class="add-to-calendar-btn">Add to Calendar</button>
            </div>
        `;

        eventCard.querySelector('.add-to-calendar-btn').addEventListener('click', () => {
            showAddToCalendarModal(event);
        });

        return eventCard;
    }

    function showEventPopup(eventKey) {
        const dayEvents = events[eventKey];
        if (!dayEvents || dayEvents.length === 0) return;

        const popup = document.getElementById('event-popup');
        eventListContainer.innerHTML = '';

        dayEvents.forEach(event => {
            eventListContainer.appendChild(createEventDetailsCard(event));
        });

        popup.classList.remove('hidden');
        // Prevent body scrolling when modal is open
        document.body.classList.add('modal-open');
    }

    function hideEventPopup() {
        const popup = document.getElementById('event-popup');
        if (popup) {
            popup.classList.add('hidden');
        }
        document.querySelectorAll('.day').forEach(d => d.classList.remove('selected'));
        // Re-enable body scrolling when modal is closed
        document.body.classList.remove('modal-open');
    }

    function createEventCard(event) {
        const card = document.createElement('div');
        card.className = 'event-card';
        card.innerHTML = `
            <div class="letter-card ${event.type.toLowerCase()}">${event.type.charAt(0)}</div>
            <div class="event-card-content">
                <h3 class="event-card-title">${event.name}</h3>
                <p class="event-card-date">${formatEventDateTime(event.date, event.time)}</p>
                <p class="event-card-description">${event.description}</p>
                <p class="event-card-location">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16"><path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-1a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/></svg>
                    ${event.location}
                </p>
            </div>
        `;
        card.addEventListener('click', () => showEventPopupFromCard(event));
        return card;
    }

    function showEventPopupFromCard(event) {
        currentEvent = event;
        const popup = document.getElementById('event-popup');
        eventListContainer.innerHTML = '';
        eventListContainer.appendChild(createEventDetailsCard(event));
        popup.classList.remove('hidden');
        // Prevent body scrolling when modal is open
        document.body.classList.add('modal-open');
    }

    function renderEventsPage() {
        upcomingEventsContainer.innerHTML = '';
        pastEventsContainer.innerHTML = '';
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        Object.keys(events).sort().forEach(eventKey => {
            const [year, month, day] = eventKey.split('-').map(Number);
            const eventDate = new Date(year, month - 1, day);

            const dayEvents = events[eventKey];
            if (dayEvents && dayEvents.length > 0) {
                dayEvents.forEach(event => {
                    const eventCard = createEventCard(event);
                    if (eventDate >= today) {
                        upcomingEventsContainer.appendChild(eventCard);
                    } else {
                        pastEventsContainer.appendChild(eventCard);
                    }
                });
            }
        });
    }

    // Event listeners
    if (leftArrow) {
        leftArrow.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar();
        });
    }

    if (rightArrow) {
        rightArrow.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar();
        });
    }

    if (closeBtn) {
        closeBtn.addEventListener('click', hideEventPopup);
    }

    if (popup) {
        popup.addEventListener('click', (e) => {
            if (e.target === popup) {
                hideEventPopup();
            }
        });
    }

    if (navEvents) {
        navEvents.addEventListener('click', (e) => {
            e.preventDefault();
            showPage('events');
        });
    }

    if (navSubmit) {
        navSubmit.addEventListener('click', (e) => {
            e.preventDefault();
            showPage('submit');
        });
    }

    // Sidebar navigation event listeners for mobile
    const sidebarNavCal = document.getElementById('sidebar-nav-cal');
    const sidebarNavEvents = document.getElementById('sidebar-nav-events');
    const sidebarNavSubmit = document.getElementById('sidebar-nav-submit');

    if (sidebarNavCal) {
        sidebarNavCal.addEventListener('click', (e) => {
            e.preventDefault();
            showPage('home');
            // Close sidebar on mobile
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebar-overlay');
            if (sidebar) sidebar.classList.remove('translate-x-0');
            if (sidebar) sidebar.classList.add('-translate-x-full');
            if (sidebarOverlay) sidebarOverlay.classList.add('hidden');
        });
    }

    if (sidebarNavEvents) {
        sidebarNavEvents.addEventListener('click', (e) => {
            e.preventDefault();
            showPage('events');
            // Close sidebar on mobile
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebar-overlay');
            if (sidebar) sidebar.classList.remove('translate-x-0');
            if (sidebar) sidebar.classList.add('-translate-x-full');
            if (sidebarOverlay) sidebarOverlay.classList.add('hidden');
        });
    }

    if (sidebarNavSubmit) {
        sidebarNavSubmit.addEventListener('click', (e) => {
            e.preventDefault();
            showPage('submit');
            // Close sidebar on mobile
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebar-overlay');
            if (sidebar) sidebar.classList.remove('translate-x-0');
            if (sidebar) sidebar.classList.add('-translate-x-full');
            if (sidebarOverlay) sidebarOverlay.classList.add('hidden');
        });
    }

    if (eventForm) {
        eventForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const eventName = document.getElementById('eventName').value;
            const eventDate = document.getElementById('eventDate').value;
            const eventTime = document.getElementById('eventTime').value;
            const eventType = document.getElementById('eventType').value;
            const eventLocation = document.getElementById('eventLocation').value;
            const eventDescription = document.getElementById('eventDescription').value;

            const eventData = {
                name: eventName,
                date: eventDate,
                time: eventTime,
                type: eventType,
                location: eventLocation,
                description: eventDescription
            };

            const result = await saveEvent(eventData);
            if (result.success) {
                showNotification('Success!', 'Event submitted successfully! It will be reviewed by an admin before appearing on the calendar.', 'success');
                eventForm.reset();
                showPage('home');
                await loadEventsAndRender();
            } else {
                showNotification('Error', 'Failed to submit event: ' + result.error, 'error');
            }
        });
    }

    // Sidebar toggle functionality
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebarClose = document.getElementById('sidebar-close');
    const sidebar = document.getElementById('sidebar');
    const sidebarOverlay = document.getElementById('sidebar-overlay');

    if (sidebarToggle && sidebar) {
        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.remove('-translate-x-full');
            sidebar.classList.add('translate-x-0');
            if (sidebarOverlay) sidebarOverlay.classList.remove('hidden');
        });
    }

    if (sidebarClose && sidebar) {
        sidebarClose.addEventListener('click', () => {
            sidebar.classList.remove('translate-x-0');
            sidebar.classList.add('-translate-x-full');
            if (sidebarOverlay) sidebarOverlay.classList.add('hidden');
        });
    }

    if (sidebarOverlay && sidebar) {
        sidebarOverlay.addEventListener('click', () => {
            sidebar.classList.remove('translate-x-0');
            sidebar.classList.add('-translate-x-full');
            sidebarOverlay.classList.add('hidden');
        });
    }

    // Handle URL hash navigation from homepage dropdown
    function handleHashNavigation() {
        const hash = window.location.hash.substring(1); // Remove the #
        if (hash === 'events') {
            showPage('events');
        } else if (hash === 'submit') {
            showPage('submit');
        } else {
            showPage('home');
        }
    }

    // Initial render - only if we're on the calendar page
    if (calendarView && submitEventView && eventsView) {
        // Check for hash navigation first
        handleHashNavigation();
        loadEventsAndRender();
        
        // Apply theme on page load to ensure consistency
        applyThemeToCalendar();
        
        // Listen for hash changes
        window.addEventListener('hashchange', handleHashNavigation);
    }

    // Theme management is handled by theme-manager.js
    // But we need to apply theme when switching to calendar page
    function applyThemeToCalendar() {
        const savedTheme = localStorage.getItem('selected-theme') || 'basic-dark';
        const body = document.body;
        
        // Remove all existing theme classes
        body.classList.remove('theme-basic-light', 'theme-basic-dark');
        
        // Add the selected theme class
        body.classList.add(`theme-${savedTheme}`);
        
        // Update theme selector if it exists
        const themeSelect = document.getElementById('theme-select');
        if (themeSelect) {
            themeSelect.value = savedTheme;
        }
    }
});

// --- Admin Functions for Event Approval ---

/**
 * Fetches all pending events for admin review.
 * @returns {Promise<object>} A promise that resolves with pending events.
 */
async function getPendingEvents() {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }
    // Verify admin status server-side
    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to fetch pending events");
            return { success: false, error: "Admin privileges required." };
        }
        const snapshot = await db.collection("events")
            .where("status", "==", "pending")
            .get();

        const events = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        
        // Sort by submittedAt on the client side (oldest first)
        events.sort((a, b) => {
            const aTime = a.submittedAt ? a.submittedAt.toDate ? a.submittedAt.toDate() : new Date(a.submittedAt) : new Date(0);
            const bTime = b.submittedAt ? b.submittedAt.toDate ? b.submittedAt.toDate() : new Date(b.submittedAt) : new Date(0);
            return aTime - bTime;
        });
        return { success: true, events: events };

    } catch (error) {
        console.error("Error fetching pending events:", error);
        return { success: false, error: "Failed to fetch pending events." };
    }
}

/**
 * Updates the status of an event (e.g., to "approved" or "rejected").
 * @param {string} eventId - The ID of the event to update.
 * @param {string} newStatus - The new status ("approved" or "rejected").
 * @returns {Promise<object>} A promise that resolves on success.
 */
async function updateEventStatus(eventId, newStatus) {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    // Verify admin status server-side
    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to update event status");
            return { success: false, error: "Admin privileges required." };
        }

        const docRef = db.collection("events").doc(eventId);
        await docRef.update({ 
            status: newStatus,
            reviewedBy: user.uid,
            reviewedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        return { success: true };
    } catch (error) {
        console.error("Error updating event status:", error);
        return { success: false, error: "Failed to update status." };
    }
}

/**
 * Fetches all events by status (pending, approved, rejected, all).
 * @param {string} status - The status to filter by ("pending", "approved", "rejected", "all").
 * @returns {Promise<object>} A promise that resolves with events.
 */
async function getEventsByStatus(status = "all") {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to fetch events");
            return { success: false, error: "Admin privileges required." };
        }

        let query = db.collection("events").orderBy("createdAt", "desc");
        
        if (status !== "all") {
            query = query.where("status", "==", status);
        }

        const snapshot = await query.get();
        const events = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        
        return { success: true, events: events };
    } catch (error) {
        console.error("Error fetching events by status:", error);
        return { success: false, error: "Failed to fetch events." };
    }
}

/**
 * Fetches upcoming events (approved events with dates in the future).
 * @returns {Promise<object>} A promise that resolves with upcoming events.
 */
async function getUpcomingEvents() {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            return { success: false, error: "Admin privileges required." };
        }

        const now = new Date();
        const snapshot = await db.collection("events")
            .where("status", "==", "approved")
            .where("date", ">=", now.toISOString().split('T')[0])
            .orderBy("date", "asc")
            .get();

        const events = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        return { success: true, events: events };
    } catch (error) {
        console.error("Error fetching upcoming events:", error);
        return { success: false, error: "Failed to fetch upcoming events." };
    }
}

/**
 * Fetches past events (approved events with dates in the past).
 * @returns {Promise<object>} A promise that resolves with past events.
 */
async function getPastEvents() {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            return { success: false, error: "Admin privileges required." };
        }

        const now = new Date();
        const snapshot = await db.collection("events")
            .where("status", "==", "approved")
            .where("date", "<", now.toISOString().split('T')[0])
            .orderBy("date", "desc")
            .get();

        const events = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        return { success: true, events: events };
    } catch (error) {
        console.error("Error fetching past events:", error);
        return { success: false, error: "Failed to fetch past events." };
    }
}

/**
 * Deletes an event permanently from the database.
 * @param {string} eventId - The ID of the event to delete.
 * @returns {Promise<object>} A promise that resolves on success.
 */
async function deleteEvent(eventId) {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            console.error("Unauthorized access attempt to delete event");
            return { success: false, error: "Admin privileges required." };
        }

        await db.collection("events").doc(eventId).delete();
        return { success: true, message: "Event deleted successfully." };
    } catch (error) {
        console.error("Error deleting event:", error);
        return { success: false, error: "Failed to delete event." };
    }
}

/**
 * Gets event statistics for admin dashboard.
 * @returns {Promise<object>} A promise that resolves with event statistics.
 */
async function getEventStats() {
    const user = auth.currentUser;
    if (!user) {
        return { success: false, error: "Authentication required." };
    }

    try {
        const isAdmin = await isUserAdmin();
        if (!isAdmin) {
            return { success: false, error: "Admin privileges required." };
        }

        const [pending, approved, rejected] = await Promise.all([
            db.collection("events").where("status", "==", "pending").get(),
            db.collection("events").where("status", "==", "approved").get(),
            db.collection("events").where("status", "==", "rejected").get()
        ]);

        return {
            success: true,
            stats: {
                pending: pending.size,
                approved: approved.size,
                rejected: rejected.size,
                total: pending.size + approved.size + rejected.size
            }
        };
    } catch (error) {
        console.error("Error fetching event stats:", error);
        return { success: false, error: "Failed to fetch event statistics." };
    }
}

// --- Authentication State Management ---

/**
 * Updates the sidebar navigation based on authentication state
 */
function updateSidebarAuth(user) {
    const sidebarGuestNav = document.getElementById('sidebar-guest-nav');
    const sidebarUserNav = document.getElementById('sidebar-user-nav');
    const authButtons = document.getElementById('auth-buttons');
    const sidebarLogoutButton = document.getElementById('sidebar-logout-button');
    const sidebarAdminAccessBtn = document.getElementById('sidebar-admin-access-btn');

    if (user) {
        // User is logged in
        // Update main header auth buttons
        if (authButtons) {
            authButtons.innerHTML = `
                <button id="logout-button" class="bg-red-600 text-white px-4 py-2 rounded-full hover:bg-red-700 transition duration-300">
                    Sign Out
                </button>
            `;
            
                    // Add logout functionality to main header
        const logoutButton = document.getElementById('logout-button');
        if (logoutButton) {
            // Remove existing event listeners to prevent duplication
            const newLogoutButton = logoutButton.cloneNode(true);
            logoutButton.parentNode.replaceChild(newLogoutButton, logoutButton);
            
            newLogoutButton.addEventListener('click', async () => {
                try {
                    await logoutUser();
                    showNotification('Success', 'Logged out successfully', 'success');
                } catch (error) {
                    console.error('Logout error:', error);
                    showNotification('Error', 'Failed to logout', 'error');
                }
            });
        }
        }

        // Update sidebar navigation
        if (sidebarGuestNav) {
            sidebarGuestNav.classList.add('hidden');
        }
        if (sidebarUserNav) {
            sidebarUserNav.classList.remove('hidden');
        }

        // Add logout functionality to sidebar
        if (sidebarLogoutButton && sidebarLogoutButton.parentNode) {
            // Remove existing event listeners to prevent duplication
            const newSidebarLogoutButton = sidebarLogoutButton.cloneNode(true);
            sidebarLogoutButton.parentNode.replaceChild(newSidebarLogoutButton, sidebarLogoutButton);
            
            newSidebarLogoutButton.addEventListener('click', async () => {
                try {
                    await logoutUser();
                    showNotification('Success', 'Logged out successfully', 'success');
                } catch (error) {
                    console.error('Logout error:', error);
                    showNotification('Error', 'Failed to logout', 'error');
                }
            });
        }

        // Check if user is admin and show admin access button
        if (sidebarAdminAccessBtn && sidebarAdminAccessBtn.parentNode) {
            isUserAdmin().then(isAdmin => {
                if (isAdmin) {
                    sidebarAdminAccessBtn.classList.remove('hidden');
                    // Remove existing event listeners to prevent duplication
                    const newAdminAccessBtn = sidebarAdminAccessBtn.cloneNode(true);
                    if (sidebarAdminAccessBtn.parentNode) {
                        sidebarAdminAccessBtn.parentNode.replaceChild(newAdminAccessBtn, sidebarAdminAccessBtn);
                        
                        newAdminAccessBtn.addEventListener('click', () => {
                            window.location.href = 'admin-access.html';
                        });
                    }
                } else {
                    sidebarAdminAccessBtn.classList.add('hidden');
                }
            }).catch(error => {
                console.error('Error checking admin status:', error);
                if (sidebarAdminAccessBtn) {
                    sidebarAdminAccessBtn.classList.add('hidden');
                }
            });
        }

    } else {
        // User is not logged in
        // Update main header auth buttons
        if (authButtons) {
            authButtons.innerHTML = `
                <a href="login.html" class="bg-blue-600 text-white px-4 py-2 rounded-full hover:bg-blue-700 transition duration-300">
                    Sign In
                </a>
            `;
        }

        // Update sidebar navigation
        if (sidebarGuestNav) {
            sidebarGuestNav.classList.remove('hidden');
        }
        if (sidebarUserNav) {
            sidebarUserNav.classList.add('hidden');
        }

        // Hide admin access button
        if (sidebarAdminAccessBtn) {
            sidebarAdminAccessBtn.classList.add('hidden');
        }
    }
}

/**
 * Initialize authentication state listener
 */
function initializeAuthStateListener() {
    // Listen for auth state changes
    auth.onAuthStateChanged(async (user) => {
        updateSidebarAuth(user);
    });

    // Also listen for the custom auth state changed event from firebase-init.js
    window.addEventListener('authStateChanged', (event) => {
        updateSidebarAuth(event.detail.user);
    });

    // Initial update based on current auth state
    updateSidebarAuth(auth.currentUser);
}

// Initialize auth state listener when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Wait a bit for Firebase to initialize
    setTimeout(() => {
        initializeAuthStateListener();
    }, 100);
});

// Also initialize immediately if DOM is already loaded
if (document.readyState === 'loading') {
    // DOM is still loading, wait for DOMContentLoaded
} else {
    // DOM is already loaded, initialize immediately
    setTimeout(() => {
        initializeAuthStateListener();
    }, 100);
}
